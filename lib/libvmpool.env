#!/bin/bash
#######################################################
##  Generated file - do not edit.
#######################################################
#######################################################
##  Generated file - do not edit.
#######################################################

function vm_pool__lovmname {
    local vmname=$1
    local lovmnameU="${vmname//_}"
    local lovmname="${lovmnameU,,}"
    echo "${lovmname}"
}

function libvmpool__dnsname {
    local vmname=$1
    local lovmname="$(vm_pool__lovmname $vmname)"
    echo "${lovmname}.cto.script.tv"
}

function vm_root_name {
    local cur=$1
    while [[ true ]]; do
        local var=${cur}
        if [[ -z $cur ]]; then
            break
        fi
        local n=${!var}
        if [[ "_$n" == "_" ]]; then
            echo ${cur}
            break
        fi
        cur=$n
    done
}

function libvmpool__load_vm {
    local vma=$1
    local vm=$(vm_root_name ${vma})
    local var=${vm}__pool;          local pool=${!var}
    local var=${vm}__name;          local name=${!var}
    local var=${vm}__server_name;   local server_name=$(libvmpool__dnsname ${vm})
    local var=${vm}__ip;            local ip=${!var}
    local var=${vm}__type;          local type=${!var}
    local var=${vm}__arch;          local arch=${!var}
    local var=${vm}__sshport;       local sshport=22
    local var=${vm}__use;           local use=${!var}
    libvmpool__vm="${vm}"
    libvmpool__pool="${pool}"
    libvmpool__name="${name}"
    libvmpool__server_name="${server_name}"
    libvmpool__ip="${ip}"
    libvmpool__type="${type}"
    libvmpool__arch="${arch}"
    libvmpool__sshport="${sshport}"
    libvmpool__use="${use}"
}

function libvmpool__print {
    local prefix="$1"
    cat << EOF
${prefix}vm="${libvmpool__vm}"
${prefix}pool="${libvmpool__pool}"
${prefix}name="${libvmpool__name}"
${prefix}server_name="${libvmpool__server_name}"
${prefix}ip="${libvmpool__ip}"
${prefix}type="${libvmpool__type}"
${prefix}arch="${libvmpool__arch}"
${prefix}sshport="${libvmpool__sshport}"
${prefix}use="${libvmpool__use}"

EOF
}

function libvmpool__print_vm {
    local vma=$1
    local prefix="$2"
#>&2 echo "------------------ $vm $prefix"
    if [[ "_${prefix}" == "_" ]]; then
        local prefix="VM_"
    fi
    if [[ "_$vma" == "_" ]]; then
        >&2 print_stack
        >&2 echo "KO 65912 invalid vm or vm alias vma=-->$vma<--."
        exit 1
    fi
    libvmpool__load_vm ${vma}
    libvmpool__print "${prefix}"
}

function libvmpool__print_mnemonic {
    local pnemo=$1
    local var=${pnemo}__vm; local vm=${!var}
    libvmpool__load_vm ${vm}
    libvmpool__print "${pnemo}__"
}

function libvmpool__vm_as {
    local vma=$1
    local pnemo="$2"
    if [[ -z "$vma" ]]; then
        >&2 echo "KO 65942 invalid vm or vm alias."
        exit 1
    fi
    if [[ -z "$pnemo" ]]; then
        >&2 print_stack
        >&2 echo "KO 65943 invalid mnemonic $vm $pnemo."
        exit 1
    fi
    libvmpool__load_vm $vma
    libvmpool__print "${pnemo}__" > /tmp/xxh677
    . /tmp/xxh677
    rm -f /tmp/xxh677
}


function vmpool_check_exists_vm {
    local vm=$1
    let n=$(cat lib/vm/pool.env | grep "^${vm}__" | wc -l)
    if [[ $n -lt 5 ]]; then
        >&2 echo "$VM doesn't seem to exist in vm/leases, vm/pool $vm  $n"
        exit 1
    fi
    let n=$(list_vm | grep $vm | wc -l)     
    if [[ $n -ne 1 ]]; then
        >&2 echo "$VM is not listed in list_vm"
        exit 1
    fi
}


function libvmpool__ip_as {
    local ip="$1"
    local pnemo="$2"
    if [[ "_$ip" == "_" ]]; then
        >&2 echo "KO 65932 invalid ip."
        exit 1
    fi
    if [[ "_$pnemo" == "_" ]]; then
        >&2 echo "KO 65933 invalid mnemonic."
        exit 1
    fi
    local var="VM__$(echo $ip | tr '.' '_')"
    local vm=${!var}
    if [[ "_${vm}" == "_" ]]; then
        >&2 echo "KO 65934 cannor resolve VM from ip ${ip}."
        exit 1
    fi
    libvmpool__load_vm $vm
    libvmpool__print "${pnemo}__" > /tmp/xxh677
    . /tmp/xxh677
    rm /tmp/xxh677
}

function libvmpool__vm_from_ip {
    local ip="$1"
    if [[ "_$ip" == "_" ]]; then
        >&2 echo "KO 65932 invalid ip."
        exit 1
    fi
    local var="VM__$(echo $ip | tr '.' '_')"
    local vm=${!var}
    echo ${vm}
}

function libvmpool__info_ip {
    local ip="$1"
    local var="VM__$(echo $ip | tr '.' '_')"
    local vm=${!var}
    if [[ "_$vm" != "_" ]]; then
        libvmpool__print_vm $vm
    fi
}

function libvmpool_register_new_vm { #TODO: add arch
    local pool=$1
    local name=$2
    local os=$3
    local ip=$4
    local instance_name=$5
    local type=$6
    local region_pem_file=$7
    echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
    echo "registering vm ${pool} ${name} ${os} ${ip} ${instance_name} ${type} ${region_pem_file}"
    #TODO
}

function libvmpool__vm_terminated {
    local vm=$1
    echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
    echo "terminated vm ${vm}"
    #TODO
}
 




