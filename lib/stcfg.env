#!/bin/bash

### stcfg lib - static congifuration for bash programs
###

#------------------------- libOOP ------------------------------

liboop__poke__() { ## 1:class 2:instance 3:variable 4:value
    local var="oop_${1}_${2}_${3}"
    declare -g "$var"="$4"
}

liboop__peek__() { ## 1:lib 2:set 3:key
    local var="oop_${1}_${2}_${3}"
    echo ${!var}
}

#-----------------------------------------------------------------
#    libOOP - class stcfg
#-----------------------------------------------------------------

stcfg__id="global"

stcfg__static_poke() { ## 1:key 2:value
    liboop__poke__ "stcfg" "global" "$1" "$2"   #global=static
}

stcfg__static_peek() { ## 1:key
    liboop__peek__ "stcfg" "global" "$1"
}

stcfg__poke() { ## 1:key 2:value   #per-config file
    liboop__poke__ "stcfg" "${stcfg__id}" "$1" "$2"   #g=static
}

stcfg__peek() { ## 1:key           #per-config file
    liboop__peek__ "stcfg" "${stcfg__id}" "$1"
}
#-----------------------------------------------------------------

stcfg__set_value_nowrite() {
    local key="$1"
    local value="$2"
    local verbose=$3
    stcfg__poke "${key}" "${value}"
    declare -g "$key"="$value"
}

stcfg__set_value() {
    local key=$1
    local value=$2
    local verbose=$3
    stcfg__poke ${key} "${value}"
    declare -g "$key"="$value"
    if [[ "_$verbose" == "_1" ]]; then
        echo "store: ${key}=\"${value}\""
    fi
    stcfg__save
    declare -g "${key}"="${value}"
}

stcfg__get_value() {
    local v="$(stcfg__peek $1)"
    if [[ -z $v ]]; then
        echo "${2}"
    else
        echo "$v"
    fi
}

stcfg__delete_entry() {  ##deprecated, use save
    stcfg__save
}

stcfg__init_vars() {
    local set=$1
    local fn=${stcfg__id}__stcfg__${set}__vars
    local def=""
    shopt -s lastpipe
    $fn | grep -v '^$' | while read -r line; do
        let nf=$(echo "${line}" | xargs -n1 | wc -l)
        if [[ $nf -eq 2 ]]; then
            def=$(echo "${line}" | xargs -n1 | tail -n1)
        elif [[ $nf -ne 1 ]]; then
            def=""
            >&2 echo "KO 78685"
            exit 1
        fi
        key=$(echo "${line}" | awk '{ print $1}')
        stcfg__set_value_nowrite "${key}" "${def}"
    done
    if [[ $? -ne 0 ]]; then
        >&2 echo "KO 30923 subprocess exited with error code."
        exit 1
    fi
}

stcfg__init_all_vars() {
    for set in $(${stcfg__id}__stcfg__sets | xargs); do
        stcfg__init_vars $set
    done
}

stcfg__print_vars() {
    local set=$1
    local fn=${stcfg__id}__stcfg__${set}__vars
    $fn | grep -v '^$' | while read -r line; do
        local nf=$(echo ${line} | xargs -n1 | wc -l | tr -d ' ')
        if [[ $nf -eq 2 ]]; then
            local def=$(echo "${line}" | xargs -n1 | tail -n1)
        elif [[ $nf -ne 1 ]]; then
            >&2 echo "KO 78685"
            exit 1
        fi
        local key=$(echo "${line}" | awk '{ print $1}')
        local v=$(stcfg__get_value $key)
        echo "$key=\"${v}\""
    done
}

stcfg__from_env() {
    local set=$1
    local fn=${stcfg__id}__stcfg__${set}__vars
    $fn | grep -v '^$' | while read -r line; do
        local nf=$(echo ${line} | xargs -n1 | wc -l)
        if [[ $nf -eq 2 ]]; then
            local def=$(echo "${line}" | xargs -n1 | tail -n1)
        elif [[ $nf -ne 1 ]]; then
            >&2 echo "KO 78685"
            exit 1
        fi
        local key=$(echo "${line}" | awk '{ print $1}')
        local v=${!key}
        stcfg__set_value_nowrite "${key}" "${v}"
    done
}

stcfg__write_vars() {
    set=$1
    local fn=${stcfg__id}__stcfg__${set}__vars
    $fn | grep -v '^$' | while read -r line; do
        local key=$(echo "${line}" | awk '{ print $1 }')
        stcfg__peek $key
    done
}

stcfg__print_all_vars() {
    for set in $(${stcfg__id}__stcfg__sets | xargs); do
        echo "# $set"
        stcfg__print_vars $set
        echo
    done
}

stcfg__from_env__all() {
    for set in $(${stcfg__id}__stcfg__sets | xargs); do
        stcfg__from_env $set
    done
}

stcfg__save() {
    local file="$(stcfg__peek "file")"
    local curversion=$(${stcfg__id}__stcfg__version)
    cat << EOF > ${file}
# stcfg
version="$curversion"

EOF
    stcfg__print_all_vars >> ${file}
}

stcfg__use() {
    stcfg__id=$1
    local file="$(stcfg__peek "file")"
    if [[ -z $file ]]; then
        >&2 echo "KO 79073 No file for ${stcfg__id}."
        exit 1
    fi
    #stcfg__init_all_vars
}

stcfg__init() {
    if [[ -z $1 ]]; then
        >&2 echo "KO 78958 stcfg__init missing Argument 1 id."
        exit 1
    fi
    if [[ -z $2 ]]; then
        >&2 echo "KO 78959 stcfg__init missing Argument 2 config file."
        exit 1
    fi
    stcfg__id=$1
    local file=$2
    mkdir -p $(dirname ${file})
    let save=0
    if [[ ! -f ${file} ]]; then
        touch $file
        let save=1
    fi
    file=$(realpath ${file})
    stcfg__poke "file" "$file"
    stcfg__init_all_vars
    local curversion=$(${stcfg__id}__stcfg__version)
    . ${file}
    if [[ -z "$version" ]]; then
        version=0
    fi
    if ! [[ "$version" =~ ^[0-9]+$ && "$curversion" =~ ^[0-9]+$ ]]; then
        >&2 echo "KO 10293 Invalid or missing version: version=\"$version\", curversion=\"$curversion\""
        exit 1
    fi
    if (( version > curversion )); then
        >&2 echo "KO 20192 This version of devtool is old compared to the version that wrote the configuration file ${file}"
        exit 1
    fi
    stcfg__from_env__all
    if [[ ${version} != ${curversion} ]]; then
        let save=1
    fi
    if [[ $save -eq 1 ]]; then
        stcfg__save
    fi
    if [[ $version != ${curversion} ]]; then
        ${stcfg__id}__stcfg__on_new_version $version
    fi
}
