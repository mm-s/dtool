#!/bin/bash

mk_target__deps_build__apt() {
    libss__deps_build__apt
    libsystemd__deps_build__apt
    libweb__deps_build__apt
    echo "npm"
}

mk_target__deps_runtime__apt() {
    libss__deps_runtime__apt
    libsystemd__deps_runtime__apt
    libweb__deps_runtime__apt
    . r2r/libr2r_b2c__b.env
    r2r_b2c__b__deps_runtime__apt
    echo "nodejs"
}

mk_target__build_order__depends() {
    echo "os/node"
}

mk_target__check_instance() {
    check_instance__p2p_infrastructure
}

mk_target__resolve_variables() {
   #       dest_variable               SS                  instance            network         var
:
}

mk_target__set_vars() {
    #----------------subsystem
    ss_version="1.0"
    ss_test__delay="10"
    secrets_dir="${ss_secrets__root}"
    libss__set_vars

    #----------------daemon 1
    daemon_name=""
    target_libdir="/svr/${system_unix_name}/${ssn}"
    configdir="${target_libdir}"
    bindir="${target_libdir}"  #TODO: r/o filesystem
    logdir="/var/log/${system_unix_name}"
    bin_daemon="${bindir}/index.js"
    if [[ "_${build_mode}" == "_debug" ]]; then  #loglevel possible values: error warn info verbose debug
        log_levels="*debug"
    else
        log_levels="*error"
    fi
    workdir="${target_libdir}"
    exec_line="node ${bin_daemon}"

    #--------------- config
    runtime_config="dotool.env"

    #------------------------ systemd
        #------------------------ daemon1
    libsystemd_input__workdir="${workdir}"
    libsystemd_input__exec_line="${exec_line}"
    libsystemd_input__after_svc=""
    libsystemd__set_vars "${daemon_name}"

    #-------------------------ports
    listen_port=$(reserve_port "${daemon_name}")
    net_interface="127.0.0.1"

    #------------------------ libweb
    webmode="proxy"
    hostname="$(p2p_hostname_rewrite backend-b2c)"
    url_path=""
    libweb__set_vars "${daemon_name}" "${webmode}" "${daemon_name}" "${listen_port}" "${hostname}" "${url_path}"   #API daemon 1

    #------------------------- pub
    URL="$(liburl__peek URL)"

}

mk_target__vars__echo() {
    libss__vars__echo
    libsystemd__vars__echo
    libweb__vars__echo
    mk_target__vars__echo__header
    cat << EOF
ss_version="${ss_version}"
ss_test__delay="${ss_test__delay}"
secrets_dir="${secrets_dir}"
node_rpc__URL="${gov__api_URL__local}"

daemon_name="${daemon_name}"
target_libdir="${target_libdir}"
configdir="${configdir}"
bindir="${bindir}"
logdir="${logdir}"
bin_daemon="${bin_daemon}"
log_levels="${log_levels}"
log_levels="${log_levels}"
workdir="${workdir}"
exec_line="${exec_line}"

listen_port="${listen_port}"
webmode="${webmode}"
hostname="${hostname}"
url_path="${url_path}"

EOF
}

mk_target__hot_upgrade__info() {
    libss__hot_upgrade__info
    #preserve-runtime_dir    chown-user chown-grp
#    echo "d ${license_dir} ${runuser} ${runuser}"

}

# --------------------- secrets
mk_target__secrets__version() {
    echo "1"
}

mk_target__secrets__print() {
    cat << EOF

EOF
}

mk_target__secrets__init() {
:
}
# -/------------------- secrets


mk_target__generate_static_conf() {
    ## dotool interface
    echo "## runtime_config ###########################################"
    echo "## file: ${runtime_config}"
    echo "###########################################################"

    cat << EOF | tee ${runtime_config} | sed "s~\(.*\)~## \1~"
git_version="${git_version}"
ss_network="${ss_network}"
ss_instance="${ss_instance}"
listen_port=${listen_port}
log_levels="${log_levels}"

EOF

}

mk_target__build_install() {
    local ss_cache_dir=$1
    if [[ -d ${ss_cache_dir}/files ]]; then
        return
    fi
    #TODO send to stderr real errors (after filtering them out among warnings) //anything in stderr causes build to stop 

    bin/build_install || {
        >&2 echo "KO 67678 Compilation failed"
        exit 1
    }
    mkdir -p ${ss_cache_dir}/files
    mv node_modules ${ss_cache_dir}/files/
    make clean
}

mk_target__transfer_from_cache() {
    local ss_cache_dir=$1
    local jail=$2
    mkdir -p ${jail}${target_libdir}
    cp -R ${ss_cache_dir}/files/* ${jail}${target_libdir}/

    libsystemd__write_svc ${jail} "${daemon_name}"
    libweb__gen_site ${jail} "${daemon_name}"  #  fn_headers

}

mk_target__libfn() {
    libss__libfn "${daemon_name}"
    libsystemd__libfn "${daemon_name}"
    libweb__libfn "${daemon_name}"
}

mk_target__steps__pre_install() {
    libss__steps__pre_install "${daemon_name}"
    libsystemd__steps__pre_install "${daemon_name}"
    libweb__steps__pre_install "${daemon_name}"
}

mk_target__steps__post_install() {
    libss__steps__post_install "${daemon_name}"
    libsystemd__steps__post_install "${daemon_name}"
    libweb__steps__post_install "${daemon_name}"
#    cat << EOF
#    mkdir -p ${license_dir}
#    chown ${runuser}:${runuser} ${license_dir} -R
#    chmod 0770 ${license_dir}
#
#EOF
}

mk_target__steps__pre_uninstall() {
    libss__steps__pre_uninstall "${daemon_name}"
    libsystemd__steps__pre_uninstall "${daemon_name}"
    libweb__steps__pre_uninstall "${daemon_name}"
}

mk_target__steps__post_uninstall() {
    libss__steps__post_uninstall "${daemon_name}"
    libsystemd__steps__post_uninstall "${daemon_name}"
    libweb__steps__post_uninstall "${daemon_name}"
}

mk_target__declare_listening_tcp_ports() {
    libss__declare_listening_tcp_port "${daemon_name}" ${listen_port} http localhost
    libsystemd__declare_listening_tcp_ports "${daemon_name}"
    libweb__declare_listening_tcp_ports "${daemon_name}"
}

mk_target__systemctl_services__shared() {
    libss__systemctl_services__shared "${daemon_name}"
    libsystemd__systemctl_services__shared "${daemon_name}"
    libweb__systemctl_services__shared "${daemon_name}"
}

mk_target__systemctl_services() {
    libss__systemctl_services "${daemon_name}"
    libsystemd__systemctl_services "${daemon_name}"
    libweb__systemctl_services "${daemon_name}"
}

mk_target__libweb_info() {
    libweb__info "${daemon_name}"
}

mk_target__amend() {
    jail=$1
    libss__amend $jail "${daemon_name}"
    libsystemd__amend $jail "${daemon_name}"
    libweb__amend $jail "${daemon_name}"
    mk_target__amend__dont_uninstall_files_in $jail ${target_libdir}
}

mk_target__constructor() {
    . ${libdir}/mk_target/libbuild_systemd.env
    . ${libdir}/mk_target/libbuild_web.env
    libss__constructor
    libsystemd__constructor
    libweb__constructor
}

