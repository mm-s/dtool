#!/bin/bash

libjobs__ref=""
libjobs__stage=""
libjobs__main=""

libjobs__root_worktree="" #/home/manic_beret/dev/system
libjobs__active_worktree="" #abs path to worktree

libjobs__jobsdir=""
libjobs__gitforce=""

libjobs__format() {
    local pfx="$1"
    while read -r line; do
        job_number=$(echo "$line" | awk '{ print $1 }')
        job_id=$(echo "$line" | awk '{ print $2 }')
        job_url=$(echo "$line" | awk '{ print $3 }')
        job_title=$(echo "$line" | cut -f4- -d' ' )
        echo "${pfx}${job_number} - ${job_title}"
        echo "${pfx}    - ${job_url}"
        echo
    done
}

libjobs__print_all() {
    local pfx="$1"
    cat ${libjobs__jobsdir}/all | libjobs__format "$pfx"
}

libjobs__print_job() {
    local job=$1
    local pfx="$2"
    if [[ "$job" == "0" ]]; then
        echo "${pfx}0 - Idle. No job."
        return
    fi
    cat ${libjobs__jobsdir}/all | grep "^$job " | libjobs__format "$pfx"
}

libjobs__print_active_job() {
    libjobs__print_job $(libjobs__active_job) "       "
}

libjobs__print() {
    libjobs__print_job $1
}

libjobs__taken_jobs() {
    git worktree list | sed "s~${libjobs__root_worktree}/~~" | grep "^job_" | awk '{ print $1 }' | sed 's~job_~~'
}

libjobs__print_taken() {
    local number
    local pfx="       "
    while read -r number; do
        awk -v num="$number" '$1 == num' "${libjobs__jobsdir}/all" | libjobs__format "$pfx"
    done < <(libjobs__taken_jobs)
}

libjobs__fetch_page() {
    local page=$1
    curl -s -L --request GET \
    --url "https://api.github.com/repos/scriptnetwork/system/issues?per_page=100&page=${page}&filter=all" \
    -H "Accept: application/vnd.github.text+json" \
    -H "Authorization: Bearer ${github_access_token}"  | jq -r '(.[] | [.number, .id, .url, .title]) | @tsv'  | tr \\t ' ' | sed 's~https://api.github.com/repos/scriptnetwork/~https://github.com/scriptnetwork/~'
}

libjobs__cancel_uncommited() {
    let needcommit=$(git status --porcelain | grep -v "^?? " | wc -l)
    if [[ $needcommit -ne 0 ]]; then
        local active=$(libjobs__active_job)
        >&2 echo -n "Current branch is "
        >&2 git branch --show-current
        >&2 libjobs__print_job $active 
        >&2 echo "KO 20192 current branch has local modifications. Commit or stash them first."
        exit 1
    fi
}

libjobs__fetch() {
    echo "calling github api"
    echo -n "" > ${libjobs__jobsdir}/all0
    local page=0
    while true; do
        ((page++))
        echo "fetching page $page"
        libjobs__fetch_page $page >> ${libjobs__jobsdir}/all0
        local num=$(cat ${libjobs__jobsdir}/all0 | wc -l)
        if [[ "$num" -eq "${page}00" ]]; then
            continue
        fi
        break
    done
    echo "OK File jobs/all updated. ${num} jobs."
    echo
    echo "New:"
    diff ${libjobs__jobsdir}/all ${libjobs__jobsdir}/all0 | grep "^> "
    echo
    echo "Closed/renamed:"
    diff ${libjobs__jobsdir}/all ${libjobs__jobsdir}/all0 | grep "^< "
    local number
    diff ${libjobs__jobsdir}/all ${libjobs__jobsdir}/all0 | grep "^< " | awk '{$1=""; sub(/^ /, ""); print}' | while read -r line; do
        number=$(echo "$line" | awk '{ print $1 }')
        libjobs__taken_jobs | grep "^$number\$" > /dev/null
        if [[ $? -ne 0 ]]; then
            continue
        fi
        echo "Releasing $line"
        libjobs__release $number
    done
    mv ${libjobs__jobsdir}/all0 ${libjobs__jobsdir}/all
}

libjobs__fetch__labels() {
    :
}

exists_branch() {
    git show-ref --verify --quiet "refs/heads/$1"
}

libjobs__sync_job() {
    local wt=$1
    pushd $wt > /dev/null || { >&2 echo "KO 60595 ${wt}"; exit 1; }
        if [[ -n "$(git status --porcelain | grep -v '^?? ')" ]]; then 
            echo $(pwd)
            echo "There are uncommitted changes here."
            echo -n "Do you want to stash + rebase + stash apply? [Enter to continue, Ctrl+C to abort]: "
            local a
            read a
            git stash || exit_error "KO 60596 git stash"
            echo "rebase $(basename $wt) onto ${libjobs__stage} ..."
            git rebase "${libjobs__stage}" || {
                >&2 echo "pwd: $(pwd)"
                >&2 echo "cmd: git rebase ${libjobs__stage}"
                >&2 echo "KO 50493"
                exit 1
            }
            git stash apply || {
                >&2 echo "KO 60597 git stash apply failed"
                exit 1
            }
        else
            echo "rebase $(basename $wt) onto ${libjobs__stage} ..."
            git rebase "${libjobs__stage}" || {
                >&2 echo "pwd: $(pwd)"
                >&2 echo "cmd: git rebase ${libjobs__stage}"
                >&2 echo "KO 50494"
                exit 1
            }
        fi
    popd > /dev/null
}

is_worktree() {
    [[ -f .git ]]
}

libjobs__sync() {
    pushd ${libjobs__root_worktree}/jobs_stage > /dev/null || { >&2 echo "KO 60593 pushd jobs_stage"; exit 1; }
        if [[ $flag_force -eq 0 ]]; then
            check_uncommited  #working files shouldn't exist here
        fi
        echo "Rebasing ${libjobs__stage} (in worktree jobs_stage) onto ${libjobs__ref}"
        git rebase ${libjobs__ref} || {
            >&2 echo "pwd $(pwd) "
            >&2 echo "cmd git rebase ${libjobs__ref}"
            >&2 echo "KO 61094 "
            exit 1
        }
        echo "Rebased ${libjobs__stage} onto ${libjobs__ref}"
        git push origin ${libjobs__stage} -f
    popd > /dev/null
    pushd ${libjobs__root_worktree} > /dev/null || { >&2 echo "KO 60593 pushd root worktree"; exit 1; }
        echo "Rebasing ${libjobs__main} (in worktree jobs_stage) onto ${libjobs__stage}"
        git rebase ${libjobs__stage} || {
            >&2 echo "pwd $(pwd) "
            >&2 echo "cmd git rebase ${libjobs__stage}"
            >&2 echo "KO 61095 "
            exit 1
        }
        echo "Rebased ${libjobs__main} onto ${libjobs__stage}"
    popd > /dev/null

    if is_worktree; then
        echo "syncing worktree branches (rebase onto ${libjobs__stage}) ..."
        libjobs__sync_job $(pwd)
    else
        echo "syncing working branches (rebase onto ${libjobs__stage}) ..."
        for job in $(libjobs__taken_jobs); do
            echo "==> job $job"
            libjobs__sync_job ${libjobs__root_worktree}/job_${job}
        done
    fi
}

libjobs__take0() {
    local job
    if [[ -z $1 ]]; then
        libjobs__print_all
        echo "Input job number to take. [Enter to continue, Ctrl+C to abort]: "
        read x
        if [[ -z $x ]]; then
            >&2 echo "KO 77968 invalid job number"
            exit 1
        fi
        local line=$(cat ${libjobs__jobsdir}/all | grep "^$x ")
        if [[ $? -ne 0 ]]; then
            >&2 echo "KO 60492 job $job not found."
            exit 1
        fi
        job=$x
    else
        job=$1
    fi
    cat ${libjobs__jobsdir}/all | grep "^$job " > /dev/null || {
        echo "job not found in ${libjobs__jobsdir}/all"
        echo "fetching jobs from github"
        libjobs__fetch
        cat ${libjobs__jobsdir}/all | grep "^$job " > /dev/null
        if [[ $? -ne 0 ]]; then
            >&2 echo "KO 77960 Job not found. $job"
            exit 1
        fi
    }
    local branch=${dev_handle}/job_${job}
    local wt=${libjobs__root_worktree}/job_${job}
    git worktree list | grep -q "^${wt} " || {
        echo "Creating worktree ${wt} (branch ${branch} forked from ${libjobs__stage}"
        if exists_branch ${branch}; then
            git worktree add ${wt} ${branch} || {
                >&2 echo "KO 65095"
                exit 1
            }
        else
            git worktree add -b ${branch} ${wt} ${libjobs__stage} || {
                >&2 echo "KO 65094"
                exit 1
            }
        fi
    }
    echo "syncing..."
    pushd ${wt} > /dev/null || { >&2 echo "KO 60597"; exit 1; }
        libjobs__sync || { >&2 echo "KO 60192"; exit 1; }
    popd > /dev/null
    echo "sync'd."
    echo "worktree at ${wt}"
}

libjobs__take() {
    local job=$1
    libjobs__take0 $@
    libjobs__print_job $job "    "
}

check_uncommited() {
    if [[ ! -z "$(git status --porcelain | grep -v '^?? ')" ]]; then 
        git status -uno
        >&2 echo "KO 70022 You left uncommitted changes at $(pwd). dt -f to skip this check."
        exit 1
    fi
}

libjobs__release() {
    local job
    if [[ -z $1 ]]; then
        libjobs__print_taken
        echo "Input job number to release. [Enter to continue, Ctrl+C to abort]: "
        local x
        read x
        if [[ -z $x ]]; then
            >&2 echo "KO 76968 invalid job number"
            exit 1
        fi
        job=$x
    else
        job=$1
    fi
    local branch=${dev_handle}/job_${job}
    local wt=${libjobs__root_worktree}/job_${job}
    libjobs__print_job $job "    "
    pushd ${wt} > /dev/null || exit 1
        if [[ ! -z "$(git status --porcelain | grep -v '^?? ')" ]]; then 
            git status -uno
            >&2 echo "WA 70021 Found uncommitted changes at $(pwd)."
            if [[ ! -z "$libjobs__gitforce" ]]; then
                echo -n "This will delete the directory and the changes above will be lost. Continue? [Enter to continue, Ctrl+C to abort]: "
                local x
                read x
            else
                >&2 echo "KO 70022 You left uncommitted changes at $(pwd)."
                exit 1
            fi
        fi
    popd > /dev/null
    echo "deleting worktree ${wt}"
    git worktree remove $libjobs__gitforce ${wt} || {
        >&2 echo "KO 50557"
        exit 1
    }
    echo "checking remote branch $branch"
    git push origin --delete $branch 2>/dev/null
    if [[ $? -eq 0 ]]; then
        echo "OK deleted remote branch $branch"
    else
        echo "OK remote branch $branch doesn't exist. Nothing to clean up."
    fi
    local lb=$(git branch --list $branch | wc -l) 
    if [[ $lb -eq 0 ]]; then
        echo "OK local branch $branch doesn't exist. Nothing to clean up."
    else
        echo "local branch $branch kept in working dir."
        echo "if you prefer to delete it type:"
        echo "git branch -D $branch"
    fi
}

libjobs__is_job() {
    if ! [[ "$1" =~ ^[0-9]+$ ]]; then
        return 1
    fi
    return 0
}

libjobs__print_worktree_branch() {
    local branch=$1
    local key value
    local line
    while read -r line; do
        if [[ -z "$line" ]]; then
            continue
        fi
        read key value <<< "$line"
        if [[ "$key" == "worktree" ]]; then
            local worktree=${value}
        elif [[ "$key" == "HEAD" ]]; then
            :
        elif [[ "$key" == "branch" ]]; then
            if [[ "$branch" == "$value" ]]; then
                echo ${worktree}
                return
            fi
        else
            >&2 echo "KO 76091 unknown key $key"
            exit 1
        fi
    done < <(git worktree list --porcelain | grep "$(pwd)" -A2 | sed 's~^--$~~')
}

libjobs__active_job() {
    local job=$(basename "$(git worktree list | awk '$1 == "'"$(pwd)"'" { print $1 }')" | sed 's/^job_//')
    if ! libjobs__is_job "$job" ]]; then
        echo "0"
        return
    fi
    echo $job
}

libjobs__active_jobs0() {
    local d=$(pwd | grep "${libjobs__root_worktree}/job_")
    echo "$d" || { echo "0"; return; }
    echo "$d" | sed "s~${libjobs__root_worktree}/job_\(.*\).*~\1~"
}

libjobs__active_jobs() {
    local pfx="       "
    local job
    libjobs__active_jobs0 | while read -r job; do
        libjobs__print_job "$job" "$pfx"
    done
}

libjobs__untrack() {
    local b=$1
    if git rev-parse --abbrev-ref --symbolic-full-name "${b}@{u}" >/dev/null 2>&1; then
        echo "Disabled remote tracking for branch $b"
        git branch --unset-upstream "$b"
    fi
}

libjobs__load_job_vars() {
    local number=$1
    local line=$(cat ${libjobs__jobsdir}/all | grep "^$number ")
    if [[ $? -ne 0 ]]; then
        >&2 echo "KO 50492 job $number not found."
        exit 1
    fi
    job_number=$(echo "$line" | awk '{ print $1 }')
    job_id=$(echo "$line" | awk '{ print $2 }')
    job_url=$(echo "$line" | awk '{ print $3 }')
    job_title=$(echo "$line" | cut -f4- -d' ' )
}

libjobs__init() {
    libjobs__ref=$1
    libjobs__stage=$2
    libjobs__main=$3
    libjobs__root_worktree=$4
    libjobs__active_worktree=$5
    libjobs__jobsdir=${libjobs__root_worktree}/jobs
    mkdir -p ${libjobs__jobsdir}
    touch ${libjobs__jobsdir}/all
    touch ${libjobs__jobsdir}/taken
}


