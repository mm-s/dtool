#!/usr/bin/env bash

function libsystemd__deps_build__apt {
:
}

function libsystemd__deps_runtime__apt {
:
}

#-----------------------------------------------------------------
#    libOOP - class stcfg 
#-----------------------------------------------------------------

libsystemd_oop_selected_daemon=""

function libsystemd__poke { ## 1:identifier 3:value
    liboop__poke__ "libsystemd" "${libsystemd_oop_selected_daemon}" "$1" "$2"
}

function libsystemd__peek { ## 1:identifier
    liboop__peek__ "libsystemd" "${libsystemd_oop_selected_daemon}" "$1"
}

function libsystemd_select_daemon {
    libsystemd_oop_selected_daemon="$1"
}

function libsystemd_selected_daemon {
    echo "${libsystemd_oop_selected_daemon}"
}

function libsystemd_get_service_file_name {
    echo "$1.service"
}

#-----------------------------------------------------------------


function libsystemd__prefix {
    local daemon=$1
    if [[ "_${daemon}" != "_" ]]; then
        echo "${daemon}__"
    else
        echo ""
    fi
}

function libsystemd__svc_name {
    local daemon=$1
    local qn="${system_unix_name}__$(tovar ${ss_tgt_path})"
    if [[ "_${daemon}" != "_" ]]; then
        qn="${qn}__${daemon}"
    fi
    echo $qn
}

function libsystemd__set_vars__file_truncate {
    local svc_name="$1"; 
    svc__svcname="$(libsystemd__peek svcname)"
    libsystemd__poke log__file__stdout "/var/log/${svc_name}.stdout"
    libsystemd__poke log__file__stderr "/var/log/${svc_name}.stderr"
}

function libsystemd__set_vars__journal {
    local svc_name="$1"; 
    libsystemd__poke log__journalcmd "journald ${svc_name}"
}

function libsystemd__vars__echo__file_truncate {
	cat << EOF
# libsystemd - log - file:truncate =# ${ssn}
log__file__stdout="$(libsystemd__peek log__file__stdout)"
log__file__stderr="$(libsystemd__peek log__file__stderr)"

EOF
}

function libsystemd__vars__echo__journal {
	cat << EOF
# libsystemd - log - journal =# ${ssn}
libsystemd__log__journalcmd="$(libsystemd__peek log__journalcmd)"

EOF
}

function libsystemd__set_vars {
    libsystemd_select_daemon "$1"

#    shopt -s lastpipe

    libsystemd__poke svc__workdir "${libsystemd_input__workdir}"
    libsystemd__poke exec_line "${libsystemd_input__exec_line}"
    libsystemd__poke after_svc "${libsystemd_input__after_svc}"

    if [[ "_${libsystemd_input__workdir}" == "_" ]]; then
        libsystemd__poke process_workdir "/home/${runuser}"
    else
        libsystemd__poke process_workdir "${libsystemd_input__workdir}"
    fi
    local svc_name=$(libsystemd__svc_name $(libsystemd_selected_daemon))
    libsystemd__poke svc__svcname "${svc_name}"

    libsystemd__poke svc__file "/etc/systemd/system/$(libsystemd_get_service_file_name ${svc_name})"
    libsystemd__poke svc__envfile "/etc/${system_unix_name}/${ssn}/env"
    libsystemd__poke svc__exec_line "${libsystemd_input__exec_line}"
    libsystemd__poke svc__requires_after "${libsystemd_input__after_svc}"
    libsystemd__poke svc__runuser "${runuser}"
    libsystemd__poke svc__type "simple"
    libsystemd__poke svc__restart_secs "10"
    if [[ "_${build_mode}" == "_debug" ]]; then
        libsystemd__poke log_method "file:truncate" 
        libsystemd__set_vars__file_truncate "${svc_name}"
    else
        libsystemd__poke log_method "journal"
        libsystemd__set_vars__journal "${svc_name}"
    fi
}

function libsystemd__vars__echo {
    libsystemd_select_daemon "$1"
    local log_method=$(libsystemd__peek log_method)
	cat << EOF
# libsystemd =# ${ssn}
process_workdir="$(libsystemd__peek process_workdir)"
init_script_dir="$(libsystemd__peek init_script_dir)"
etc_dir="$(libsystemd__peek etc_dir)"
restart_secs="$(libsystemd__peek restart_secs)"
log_method="${log_method}"

EOF

    if [[ "_${log_method}" == "_file:truncate" ]]; then
        libsystemd__vars__echo__file_truncate
    elif  [[ "_${log_method}" == "_journal" ]]; then
        libsystemd__vars__echo__journal
    fi    
}

#function libsystemd__vars__echo__input {
#    local daemon=$1
#    local prefix=$(libsystemd__prefix ${daemon})
#    if [[ "_${daemon}" != "_" ]]; then
#        local caption="daemon: ${daemon}"
#    else
#        local caption="daemon"
#    fi
#
#    local var="libsystemd_input__${prefix}workdir"; local workdir="${!var}"
#    local var="libsystemd_input__${prefix}exec_line"; local exec_line="${!var}"
#    local var="libsystemd_input__${prefix}after_svc"; local after_svc="${!var}"
#
#    cat << EOF
## libsystemd - ${caption} - input =# ${ssn}
#libsystemd_input__${prefix}workdir="${workdir}"
#libsystemd_input__${prefix}exec_line="${exec_line}"
#libsystemd_input__${prefix}after_svc="${after_svc}"
#
#EOF
#
#}


#function libsystemd__vars__echo__output {
#    local daemon=$1
#    if [[ "_${daemon}" != "_" ]]; then
#        local caption="daemon: ${daemon}"
#    else
#        local caption="daemon"
#    fi
#    local prefix=$(libsystemd__prefix ${daemon})
#    local var="${prefix}svc__svcname"; local svc__svcname="${!var}"
#    local var="${prefix}svc__file"; local svc__file="${!var}"
#    local var="${prefix}svc__envfile"; local svc__envfile="${!var}"
#    local var="${prefix}svc__work_dir"; local svc__work_dir="${!var}"
#    local var="${prefix}svc__exec_line"; local svc__exec_line="${!var}"
#    local var="${prefix}svc__requires_after"; local svc__requires_after="${!var}"
#    local var="${prefix}svc__runuser"; local svc__runuser="${!var}"
#    local var="${prefix}svc__type"; local svc__type="${!var}"
#    cat << EOF
## libsystemd - ${caption} - output =# ${ssn}
#${prefix}svc__svcname="${svc__svcname}"
#${prefix}svc__file="${svc__file}"
#${prefix}svc__envfile="${svc__envfile}"
#${prefix}svc__work_dir=${svc__work_dir}
#${prefix}svc__exec_line="${svc__exec_line}"
#${prefix}svc__requires_after="${svc__requires_after}"
#${prefix}svc__runuser="${svc__runuser}"
#${prefix}svc__type="${svc__type}"

#EOF
#}

#    https://www.freedesktop.org/software/systemd/man/latest/systemd.exec.html#StandardOutput=
#StandardOutput=
#StandardError=
#    Controls where file descriptor 1 (stdout) of the executed processes is connected to. Takes one of
#    inherit, null, tty, journal, kmsg, journal+console, kmsg+console, file:path, append:path, truncate:path, socket or fd:name.
libsystemd__write_svc0__logs() {
    if [[ "_${build_mode}" == "_debug" ]]; then
        cat << EOF
PermissionsStartOnly=true
ExecStartPre=/bin/touch $(libsystemd__peek log__file__stdout)
ExecStartPre=/bin/chown ${runuser}:${runuser} $(libsystemd__peek log__file__stdout)
ExecStartPre=/bin/touch $(libsystemd__peek log__file__stderr)
ExecStartPre=/bin/chown ${runuser}:${runuser} $(libsystemd__peek log__file__stderr)

StandardOutput=truncate:$(libsystemd__peek log__file__stdout)
StandardError=truncate:$(libsystemd__peek log__file__stderr)
EOF
    fi
}

libsystemd__write_svc0() {
    local requires_after=$(libsystemd__peek svc__requires_after)
    if [[ -z "$requires_after" ]]; then
        local requires=
    else
        local requires=$(libsystemd__peek svc__requires_after).service
    fi
    cat << EOF
[Unit]
Description=$(libsystemd__peek svc__svcname)
Requires=${requires}
After=syslog.target

# 1liner
# cd $(libsystemd__peek svc__workdir) && . $(libsystemd__peek svc__envfile) && $(libsystemd__peek svc__exec_line)
#
[Service]
WorkingDirectory=$(libsystemd__peek svc__workdir)
ExecStart=$(libsystemd__peek svc__exec_line)
EnvironmentFile=$(libsystemd__peek svc__envfile)
User=$(libsystemd__peek svc__runuser)
Type=$(libsystemd__peek svc__type)
Restart=on-failure
RestartSec=$(libsystemd__peek svc__restart_secs)
EOF
    libsystemd__write_svc0__logs
    cat << EOF

[Install]
WantedBy=multi-user.target

EOF
}

function libsystemd__write_svc {
    local jail="$1"
    libsystemd_select_daemon "$2"
    local svc__file="$(libsystemd__peek svc__file)"
    mkdir -p ${jail}$(dirname ${svc__file})
    cat << EOF
###############################################################################################################
##   systemd daemon: ${svc__file}
###############################################################################################################
EOF

    libsystemd__write_svc0 ${libsystemd_oop_selected_daemon} | tee ${jail}${svc__file}  | sed "s~^\(.*\)~## \1~"

    cat << EOF
###############################################################################################################

EOF
}

function libsystemd__libfn {
:
}

function libsystemd__steps__pre_install {
:
}

function libsystemd__steps__post_install {
:
}

function libsystemd__steps__pre_uninstall {
:
}

function libsystemd__steps__post_uninstall {
:
}

function libsystemd__systemctl_services {
    libsystemd__svc_name "$1"
}

function libsystemd__systemctl_services__shared {
:
}

function libsystemd__declare_listening_tcp_ports {
:
}

function libsystemd__declare_URLs {
:
}

function libsystemd__amend {
:
}

function libsystemd__constructor {
:
}


