#!/bin/bash


function liburl__deps_build__apt {
    echo "openssl"
}

function liburl__deps_runtime__apt {
    :
}

#-----------------------------------------------------------------
#    libOOP - class stcfg
#-----------------------------------------------------------------

liburl_oop_selected_daemon=""

function liburl__poke { ## 1:identifier 3:value
    liboop__poke__ "liburl" "${liburl_oop_selected_daemon}" "$1" "$2"
}

function liburl__peek { ## 1:identifier
    liboop__peek__ "liburl" "${liburl_oop_selected_daemon}" "$1"
}

function liburl_select_daemon {
    liburl_oop_selected_daemon="$1"
}

function liburl_selected_daemon {
    echo "${liburl_oop_selected_daemon}"
}

#-----------------------------------------------------------------


function liburl__reset {
#    liboop__for_each {
#        liburl__poke hostname ""
#        liburl__poke subdomain ""
#    } 
:
}

function liburl__port_fragment_f {
    local port_fragment=":${liburl__service_port}"
    if [[ "_${liburl__URL__protocol}" == "_http" ]]; then
        if [[ "_${liburl__service_port}" == "_80" ]]; then
            local port_fragment=""
        fi
    fi
    if [[ "_${liburl__URL__protocol}" == "_https" ]]; then
        if [[ "_${liburl__service_port}" == "_443" ]]; then
            local port_fragment=""
        fi
    fi
    liburl__port_fragment=${port_fragment}
    liburl__poke port_fragment "${liburl__port_fragment}"

}

#function liburl__downgrade_to_http {
#    liburl__print_warning__http  #https not possible, reverting back to http
#    liburl__cert_file="${liburl__cert_file}.off"
#    liburl__key_file="${liburl__key_file}.off"
#    liburl__URL__protocol="http"
#    liburl__service_port=${libweb__service_port__http}
#    liburl__poke cert_file "${liburl__cert_file}"
#    liburl__poke key_file "${liburl__key_file}"
#    liburl__poke URL__protocol "${liburl__URL__protocol}"
#    liburl__poke service_port "${liburl__service_port}"
#}

function liburl__filter_errors {
    while read -r line; do
        let is_error=0 #TODO: apply heuristics to determine line is error or debug
        if [[ $is_error -eq 1 ]]; then
            >&2 echo "$line"
        else
            echo "$line"
        fi
    done
}

liburl__check_ssl_certs() {
    if [[ "_${liburl__URL__protocol}" != "_https" ]]; then
        return
    fi
    
    liburl__ssl_certs="${secrets_root}/ssl/certs"
    liburl__cert_file=${liburl__domain}.crt
    liburl__key_file=${liburl__domain}.key
    if [[ ! -f ${liburl__ssl_certs}/${liburl__cert_file} || ! -f ${liburl__ssl_certs}/${liburl__key_file} ]]; then
        >&2 echo "KO 55664 The following files must exist:"
        >&2 echo "  * ${liburl__ssl_certs}/${liburl__key_file}"
        >&2 echo "  * ${liburl__ssl_certs}/${liburl__cert_file}"
        >&2 echo "To fix the situation:"
        >&2 echo "*3rd party issuers ...... place cert and key in aforementioned filenames."
        >&2 echo "*self-signed ............ bin/devtool create_SSL_cert ${liburl__domain}"
        exit 1
    fi
    liburl__poke ssl_certs "${liburl__ssl_certs}"
    liburl__poke cert_file "${liburl__cert_file}"
    liburl__poke key_file "${liburl__key_file}"
}

function liburl__set_vars {
    liburl_select_daemon "$1"
    liburl__hostname="$2"
    liburl__path="$3"
    liburl__dns__cname="$4"
    liburl__URL__protocol="$5"
    liburl__service_port="$6"
    if [[ "_${system__DNS__domain}" == "_" ]]; then
        >&2 print_stack
        >&2 echo
        >&2 echo "KO 44096 system__DNS__domain is not defined"
        exit 1
    fi
    if [[ "_${system__DNS__hostname_suffix}" != "_" ]]; then
        if [[ "_${liburl__hostname}" == "_" ]]; then
            liburl__hostname="${system__DNS__hostname_suffix}."
        else
            liburl__hostname="${liburl__hostname}-${system__DNS__hostname_suffix}."
        fi
    else
        if [[ "_${liburl__hostname}" != "_" ]]; then
            liburl__hostname="${liburl__hostname}."
        fi
    fi
    liburl__poke hostname "${liburl__hostname}"
    liburl__poke path "${liburl__path}"
    liburl__poke dns__cname "${liburl__dns__cname}"
    if [[ "_${secrets_root}" == "_" ]]; then
        >&2 echo
        >&2 echo "KO 44099 secrets_root is not defined"
        exit 1
    fi

    if [[ "_${system__DNS__subdomain}" != "_" ]]; then
        liburl__domain=${system__DNS__subdomain}.${system__DNS__domain}
        liburl__ca_domain=${system__DNS__subdomain}.${system__DNS__domain}
    else
        liburl__domain=${system__DNS__domain}
        liburl__ca_domain="" #root CA
    fi
    liburl__server_name="${liburl__hostname}${liburl__domain}"   #e.g. token.stage3.script.tv or token.script.tv 
    liburl__server_name__cname=""
    if [[ "_${liburl__dns__cname}" != "_" ]]; then
        liburl__server_name__cname="${liburl__dns__cname}${liburl__domain}"
    fi
    liburl__poke domain "${liburl__domain}"
    liburl__poke ca_domain "${liburl__ca_domain}"
    liburl__poke server_name "${liburl__server_name}"
    liburl__poke server_name__cname "${liburl__server_name__cname}"
    liburl__poke URL__protocol "${liburl__URL__protocol}"
    liburl__poke service_port "${liburl__service_port}"
    if [[ "_${liburl__path}" != "_" ]]; then
        if [[ "_${liburl__path:0:1}" != "_/" ]]; then
            liburl__path="/${liburl__path}"
        fi
    fi
    liburl__poke path "${liburl__path}"
    liburl__check_ssl_certs
    liburl__port_fragment_f
    liburl__URL_nopath="${liburl__URL__protocol}://${liburl__server_name}${liburl__port_fragment}"
    liburl__URL="${liburl__URL_nopath}${liburl__path}"
    liburl__cname_URL_nopath=""
    liburl__cname_URL=""
    if [[ "_${liburl__dns__cname}" != "_" ]]; then
        liburl__cname_URL_nopath="${liburl__URL__protocol}://${liburl__server_name__cname}${liburl__port_fragment}"
        liburl__cname_URL="${liburl__cname_URL_nopath}${liburl__path}"
    fi
    liburl__poke URL_nopath "${liburl__URL_nopath}"
    liburl__poke URL "${liburl__URL}"
    liburl__poke cname_URL_nopath "${liburl__cname_URL_nopath}"
    liburl__poke cname_URL "${liburl__cname_URL}"
}

function liburl__vars__echo {
	cat << EOF
# libURL =# ${ssn}
liburl_oop_selected_daemon="${liburl_oop_selected_daemon}"
liburl__ssl_certs="$(liburl__peek ssl_certs)"
liburl__cert_file="$(liburl__peek cert_file)"
liburl__key_file="$(liburl__peek key_file)"
liburl__URL__protocol="$(liburl__peek URL__protocol)"
liburl__domain="$(liburl__peek domain)"
liburl__ca_domain="$(liburl__peek ca_domain)"
liburl__subdomain="$(liburl__peek subdomain)"
liburl__hostname="$(liburl__peek hostname)"
liburl__server_name="$(liburl__peek server_name)"
liburl__server_name__cname="$(liburl__peek server_name__cname)"
liburl__service_port="$(liburl__peek service_port)"
liburl__port_fragment="$(liburl__peek port_fragment)"
liburl__path="$(liburl__peek path)"
liburl__URL_nopathL="$(liburl__peek URL_nopath)"
liburl__URL="$(liburl__peek URL)"
liburl__cname_URL_nopath="$(liburl__peek cname_URL_nopath)"
liburl__cname_URL="$(liburl__peek cname_URL)"

EOF
}

function liburl__libfn {
:
}

function liburl__steps__pre_install {
:
}

function liburl__steps__post_install {
:
}

function liburl__steps__pre_uninstall {
:
}

function liburl__steps__post_uninstall {
:
}

function liburl__info { 
    liburl_select_daemon "$1"
    local liburl__URL="$(liburl__peek URL)"
    if [[ "_${liburl__URL}" == "_" ]]; then
        >&2 echo "KO 22019 URL is empty"
        exit 1
    fi
    local liburl__hostname="$(liburl__peek hostname)"
    local liburl__dns__cname="$(liburl__peek dns__cname)"
    local liburl__cname_URL="$(liburl__peek cname_URL)"
    if [[ "_${liburl__hostname}" == "_" ]]; then
        echo "@ ${liburl__URL}"
    else
        echo "${liburl__hostname} ${liburl__URL}"
    fi
    if [[ "_${dns__cname}" != "_" ]]; then
        echo "${dns__cname} ${liburl__cname_URL}"
    fi
}

function liburl__declare_listening_tcp_ports {
    liburl_select_daemon "$1"
    libss__declare_listening_tcp_port "$1" "$(liburl__peek service_port)" "$(liburl__peek URL__protocol)" all
}

function liburl__systemctl_services {
:
}

function liburl__systemctl_services__shared {
:
}

function liburl__amend {
:
}

function liburl__print_warning__http {
    if [[ $liburl__showonce__http -eq 1 ]]; then
        return
    fi
    liburl__showonce__http=1
    >&2 echo "WA 39845 SSL cert ${liburl__cert_file} not found. disabled https. enabled http."
}

function liburl__print_warning__certimpl {
    if [[ $liburl__showonce__certimpl -eq 1 ]]; then
        return
    fi
    liburl__showonce__certimpl=1
    >&2 echo "WA 58347 liburl__create_ssl_cert is not implemented!."
}

function liburl__constructor {
:
}

