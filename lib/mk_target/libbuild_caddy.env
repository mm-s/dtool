#!/usr/bin/env bash

function libcaddy__deps_build__apt {
:
}

function libcaddy__deps_runtime__apt {
    echo "caddy"
}

libcaddy_oop_selected_daemon=""

function libcaddy__poke { ## 1:identifier 3:value
    liboop__poke__ "libcaddy" "${libcaddy_oop_selected_daemon}" "$1" "$2"
}

function libcaddy__peek { ## 1:identifier
    liboop__peek__ "libcaddy" "${libcaddy_oop_selected_daemon}" "$1"
}

function libcaddy_select_daemon {
    libcaddy_oop_selected_daemon="$1"
}

function libcaddy__set_vars {
    libcaddy__daemon="$1"
    libcaddy__content_source="$2"   #proxy|static
    libcaddy__proxy__daemon="$3"
    libcaddy__proxy__port="$4"

    libcaddy_select_daemon "${libcaddy__daemon}"
    libcaddy__poke proxy_port "${libcaddy__proxy__port}" 


    conf_dir="/etc/caddy"
    conf_enabled_dir="/etc/caddy/sites-enabled"
    libcaddy__server_name="$(liburl__peek server_name)"
    # conf_file="${conf_dir}/${ss_website}.conf"
    local dns__cname="$(liburl__peek dns__cname)"
    if [[ "_${dns__cname}" != "_" ]]; then
        libcaddy__server_name="${dns__cname}"
    fi
    libcaddy__poke conf_dir "${conf_dir}" 
    libcaddy__poke conf_enabled_dir "${conf_enabled_dir}" 
    libcaddy__poke server_name "${libcaddy__server_name}" 
    libcaddy__conf__file="${libcaddy__server_name}.caddy"
    libcaddy__poke conf__file "${libcaddy__conf__file}" 


    static_content_dir="/var/www"
    libcaddy__poke static_content_dir "${static_content_dir}" 
    # local snames="${ss_server_name}"
    # if [[ "_${ss_dns__cname}" != "_" ]]; then
    #     snames="${ss_server_name} ${ss_dns__cname}${ss_subdomain}${system_DNS__domain}"
    # fi
    # server_name=${snames}
    libcaddy__conf__listen_port="${liburl__service_port}"
    libcaddy__poke conf__listen_port "${libcaddy__conf__listen_port}" 
}

function libcaddy__vars__echo {
	cat << EOF
# libcaddy
conf_dir="${conf_dir}"
conf_enabled_dir="${conf_enabled_dir}"
conf_file="${conf_file}"
static_content_dir="${static_content_dir}"
server_name="${server_name}"

EOF
}

function libcaddy__gen_site__static {
    local jail=$1
    # libcaddy__conf__listenstr="$(libnginx__peek conf__listenstr)"
    # libcaddy__conf__listenprotocol="$(libnginx__peek conf__listenprotocol)"
    # libcaddy__conf__protocol="$(libnginx__peek conf__protocol)"
    # libcaddy__conf__listen_port="$(libnginx__peek conf__listen_port)"
    # libcaddy__content_source="$(libnginx__peek content_source)"
    # libcaddy__static__conf__root="$(libnginx__peek static__conf__root)"
    # libcaddy__static__index="$(libnginx__peek static__index)"


    libcaddy__www_subdir="$(libweb__peek www_subdir)"
    libcaddy__server_name="$(libcaddy__peek server_name)"
    libcaddy__conf_enabled_dir="$(libcaddy__peek conf_enabled_dir)"
    libcaddy__conf__file="$(libcaddy__peek conf__file)"
    libcaddy__static_content_dir="$(libcaddy__peek static_content_dir)"
    cat << EOF
###############################################################################################################
##   caddy site (static content): ${libcaddy__conf__file}
###############################################################################################################
EOF
    mkdir -p $(dirname ${jail}${libcaddy__conf_enabled_dir}/${libcaddy__conf__file})
    cat << EOF | tee ${jail}${libcaddy__conf_enabled_dir}/${libcaddy__conf__file} | sed "s~^\(.*\)~## \1~"
${libcaddy__server_name} {
    root  * ${libcaddy__static_content_dir}/${libcaddy__www_subdir}
    try_files {path} {path}/index.html /index.html
    file_server
}

EOF
    cat << EOF  
###############################################################################################################

EOF
}

function libcaddy__gen_site__proxy {
    local jail=$1

    libcaddy__www_subdir="$(libweb__peek www_subdir)"
    libcaddy__server_name="$(libcaddy__peek server_name)"
    libcaddy__conf_enabled_dir="$(libcaddy__peek conf_enabled_dir)"
    libcaddy__conf__file="$(libcaddy__peek conf__file)"
    libcaddy__conf__listen_port="$(libcaddy__peek conf__listen_port)"
    libcaddy__proxy_port="$(libcaddy__peek proxy_port)"
    cat << EOF
###############################################################################################################
##   caddy site (proxied content): ${libcaddy__conf__file}
###############################################################################################################
EOF
    mkdir -p $(dirname ${jail}${libcaddy__conf_enabled_dir}/${libcaddy__conf__file})
    cat << EOF | tee ${jail}${libcaddy__conf_enabled_dir}/${libcaddy__conf__file} | sed "s~^\(.*\)~## \1~"
${libcaddy__server_name} {
    reverse_proxy localhost:${libcaddy__proxy_port}
}

EOF
    cat << EOF  
###############################################################################################################

EOF
}


function libcaddy__gen_site {
    local jail=$1
    libcaddy_select_daemon "$2"
    if [[ "_$(libweb__peek content_source)" == "_static" ]]; then
        libcaddy__gen_site__static ${jail}
    else
        libcaddy__gen_site__proxy ${jail}
    fi
}

function libcaddy__steps__pre_install {
    # absolutely do not care about uninstall
    cat << EOF
mkdir -p /etc/caddy
cat << EOH > /etc/caddy/Caddyfile
import ${conf_enabled_dir}/*.caddy
EOH
EOF
}

function libcaddy__steps__post_install {
	cat << EOF
systemctl restart caddy
EOF
}

function libcaddy__steps__pre_uninstall {
    libcaddy_select_daemon "$1"
    libcaddy__conf__file="$(libcaddy__peek conf__file)"

	cat << EOF
rm -f /etc/caddy/sites-enabled/${libcaddy__conf__file}.caddy
systemctl restart caddy
EOF
}

function libcaddy__steps__post_uninstall {
	cat << EOF
EOF
}

function libcaddy__constructor {
:
}

function libcaddy__libfn {
:
}
