#!/bin/bash

libpostgres__deps_build__apt() {
:
}

libpostgres__deps_runtime__apt() {
    cat << EOF
postgresql
postgresql-contrib
EOF
}

libpostgres__set_vars() {
    libpostgres__daemon="$1"
    libpostgres__listen_port="$2"
    libpostgres__db_name="$3"
    libpostgres__role="$4"
    libpostgres__passphrase="$5"

    if [[ "_${build__target_OS}" == "_debian_12_stable" ]]; then
        libpostgres__version=15
    elif [[ "_${build__target_OS}" == "_debian_12_testing" ]]; then
        libpostgres__version=17
    elif [[ "_${build__target_OS}" == "_debian_sid" ]]; then
        libpostgres__version=17
    elif [[ "_${build__target_OS}" == "_ubuntu_24" ]]; then  #24.04
        libpostgres__version=16
    elif [[ "_${build__target_OS}" == "_ubuntu_24_10" ]]; then
        libpostgres__version=16
    else
        2>&1 echo "KO 66958 Unknown build__target_OS ${build__target_OS}"
        exit 1
    fi
    libpostgres__cluster="${system_unix_name}"  #script_tv

    #listening tcp ports
    libpostgres__vardir="/var/${system_unix_name}/${ssn}"
    libpostgres__clusterdir="/etc/postgresql/${libpostgres__version}/${libpostgres__cluster}"
}

libpostgres__vars__echo() {
    cat << EOF
# libpostgres =# ${ssn}
libpostgres__version="${libpostgres__version}"
libpostgres__cluster="${libpostgres__cluster}"
libpostgres__listen_port=${libpostgres__listen_port}
libpostgres__db_name="${libpostgres__db_name}"
libpostgres__clusterdir="${libpostgres__clusterdir}"

# libpostgres =# credentials
libpostgres__role="${libpostgres__role}"
libpostgres__passphrase="${libpostgres__passphrase}"

EOF
}

function libpostgres__declare_listening_tcp_ports {
    libss__declare_listening_tcp_port "" ${libpostgres__listen_port} postgres localhost
}

libpostgres__libfn() {
    if [[ -f ${once_guard_prefix}_${m}_libpostgres__libfn ]]; then
        return
    else
        touch ${once_guard_prefix}_${m}_libpostgres__libfn
    fi
    cat << EOF
# postgres =# ${ssn}
libfn_postgres__version=${libpostgres__version}
libfn_postgres__cluster=${libpostgres__cluster}
libfn_postgres__port=${libpostgres__listen_port}
libfn_postgres__db_name="${libpostgres__db_name}"
libfn_postgres__vardir="${libpostgres__vardir}"
libfn_postgres__role="${libpostgres__role}"
libfn_postgres__passphrase="${libpostgres__passphrase}"
EOF
    cat ${system_home}/lib/target_run/libfn_pgsql.env | grep -v "^#"
}

libpostgres__steps__pre_install() {
    if [[ -f ${once_guard_prefix}_${m}_libpostgres__steps__pre_install ]]; then
        return
    else
        touch ${once_guard_prefix}_${m}_libpostgres__steps__pre_install
    fi
    cat << EOF
#if [[ -d ${libpostgres__clusterdir}} ]]; then
#    echo "KO 48855 ${libpostgres__clusterdir} exists."
#    exit 1
#fi

EOF
}

libpostgres__steps__pre_uninstall() {
    if [[ -f ${once_guard_prefix}_${m}_libpostgres__steps__pre_uninstall ]]; then
        return
    else
        touch ${once_guard_prefix}_${m}_libpostgres__steps__pre_uninstall
    fi
    cat << EOF
echo "dropping postgresql cluster ${libpostgres__cluster}"
pg_dropcluster --stop ${libpostgres__version} ${libpostgres__cluster}
EOF
}

libpostgres__steps__post_install() {
    if [[ -f ${once_guard_prefix}_${m}_libpostgres__steps__post_install ]]; then
        return
    else
        touch ${once_guard_prefix}_${m}_libpostgres__steps__post_install
    fi
    cat << EOF
pushd ${libpostgres__clusterdir} > /dev/null
    echo "listen_addresses = '*'" >> postgresql.conf
    echo "host    all    all    0.0.0.0/0    scram-sha-256" >> pg_hba.conf
    echo "host    all    all    ::0/0    scram-sha-256" >> pg_hba.conf
popd > /dev/null
echo "Restarting postgresql cluster ${libpostgres__cluster}"
pg_ctlcluster ${libpostgres__version} ${libpostgres__cluster} restart
EOF
}


libpostgres__steps__post_uninstall() {
:
}

libpostgres__systemctl_services__shared() {
    if [[ -f ${once_guard_prefix}_${m}_libpostgres__systemctl_services__shared ]]; then
        return
    else
        touch ${once_guard_prefix}_${m}_libpostgres__systemctl_services__shared
    fi
    echo "postgresql"
}

libpostgres__systemctl_services() {
:
}

libpostgres__amend() {
:
}

libpostgres__constructor() {
:
}

