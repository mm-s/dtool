#!/bin/bash

#set by build.sh
ss_name=""
ss_secrets__root=""
ss_cache_dir=""

libss__load_secrets() {
    if [[ ! -f ${ss_secrets__root}/${bag_file} ]]; then #secret bag is virgin. Write random unique values.
        mkdir -p ${ss_secrets__root}
        if [[ $? -ne 0 ]]; then
            >&2 echo "KO 94883 Secret not found (virgin drive) but found drive is not writeable."
            exit 1
        fi
        mk_target__secrets__init
        cat << EOF > ${ss_secrets__root}/${bag_file}
ss_secrets_version="$(mk_target__secrets__version)"

EOF
        if [[ $? -ne 0 ]]; then
            >&2 echo "KO 94884 Secret not found (virgin drive) but found drive is not writeable."
            exit 1
        fi
        mk_target__secrets__print >> ${ss_secrets__root}/${bag_file}
    fi
    if [[ "_${bag_file}" != "_env" ]]; then
        >&2 echo "KO 66097 only env file format supported for secrets"
        exit 1
    fi
    if [[ ! -f ${ss_secrets__root}/${bag_file} ]]; then
        >&2 echo "KO 44039 file not found ${ss_secrets__root}/${bag_file}"
        exit 1
    fi
    ss_secrets_version="0"
    mk_target__secrets__init
    . ${ss_secrets__root}/${bag_file}
    ss_secret_version_file="${ss_secrets_version}"
    local cur_version=$(mk_target__secrets__version)
    if [[ "_${ss_secret_version}" != "_${cur_version}" ]]; then
        cat << EOF > ${ss_secrets__root}/${bag_file}
ss_secrets_version="${cur_version}"

EOF
        if [[ $? -ne 0 ]]; then
            >&2 echo "KO 94885 Could not write to ${ss_secrets__root}/${bag_file}"
            exit 1
        fi
        mk_target__secrets__print >> ${ss_secrets__root}/${bag_file}
    fi
    # leave a copy in build dir: TODO check how neccesary is this. 
    cp ${ss_secrets__root}/${bag_file} ${ss_secrets_dest_file}
}

libss__deps_build__apt() {
:
}

libss__deps_runtime__apt() {
:
#    echo "${ss_deps_runtime__apt}"
}

libss__set_vars() {
    ss_home="$(pwd)"
    ss_port_ordinal=1
    #resolver__output_var_prefix=$(libss__resolver__output_var_prefix ${ss})
    libss__load_secrets    #creates secrets.env

    tgt_path=$(tgt_path__compute)
    tgt_instance_identifier=$(tgt_instance_identifier "")
}

libss__vars__echo() {
    local xss_file=$(resolv_file ${ss} ${ss_network} ${ss_instance})
    if [[ -f ${xss_file} ]]; then
        cat << EOF
# cross-ss =# ${ssn}
EOF
        cat ${xss_file}
        echo
    else
        >&2 echo "KO 55049 file not found $xss_file"
    fi
    cat << EOF
# build =# ${ssn}
git_version="${git_version}"
git_branch="${git_branch}"
system_version="${system_version}"
system_copyright_line="${system_copyright_line}"
ss_name="${ss_name}"
ss_home="${ss_home}"
ss_version="${ss_version}"
ss_network="${ss_network}"
ss_instance="${ss_instance}"
ss_cache_dir="${ss_cache_dir}"
tgt_path="${tgt_path}"
tgt_instance_identifier="${tgt_instance_identifier}"
ss_test__delay="${ss_test__delay}"    #delay start of e2e tests. secs.

# libss - secrets =# ${ssn}
ss_secrets__root=${ss_secrets__root}
ss_secrets_dest_file="${ss_secrets_dest_file}"

EOF
}

libss__export_dotool__javascript() {
    cat << EOF
    git_version: "${git_version}",
    git_branch: "${git_branch}",
    system_version: "${system_version}",
    system_copyright_line: "${system_copyright_line}",
    ss_name: "${ss_name}",
    ss_home: "${ss_home}",
    ss_version: "${ss_version}",
    ss_network: "${ss_network}",
    ss_instance: "${ss_instance}",
    ss_cache_dir: "${ss_cache_dir}",
    tgt_path: "${tgt_path}",
    tgt_instance_identifier: "${tgt_instance_identifier}",
    ss_test__delay: "${ss_test__delay}",
EOF
}

libss__resolve_variables() {
:
}

libss__output_vars__echo() {
:
}

libss__libfn() {
:
}

libss__steps__pre_install() {
:
}

libss__steps__post_install() {
:
}

libss__steps__pre_uninstall() {
:
}

libss__steps__post_uninstall() {
:
}

libss__declare_listening_tcp_port() {
    local daemon=$1
    local port=$2
    local protocol=$3
    local interface=$4
    if [[ "_${port}" == "_" ]]; then
        return
    fi
    if [[ "_${interface}" == "_" ]]; then
        if [[ "_${port}" != "_" ]]; then
            >&2 echo "KO 88975 Invalid arguments given to libss__declare_listening_tcp_port. ${ssn}"
            exit 1 
        else
            return
        fi
    fi
#>&2    echo "========> ${ss_port_ordinal} ${port} ${protocol} ${interface}"

    echo "${ss_port_ordinal} ${port} ${protocol} ${interface}"
    ss_port_ordinal=$(echo "${ss_port_ordinal}+1" | bc)
}

libss__declare_listening_tcp_ports() {
:
}

libss__systemctl_services__shared() {
:
}

libss__systemctl_services() {
:
}

libss__declare_URLs() {
:
}

libss__amend() {
:
}

libss__hot_upgrade__info() {
:
}

libss__constructor() {
:
}

