#!/bin/bash

libnginx__deps_build__apt() {
:
}

libnginx__deps_runtime__apt() {
    echo "nginx"
}

#-----------------------------------------------------------------
#    libOOP - class stcfg 
#-----------------------------------------------------------------

libnginx_oop_selected_daemon=""

libnginx__poke() { ## 1:identifier 3:value
    liboop__poke__ "libnginx" "${libnginx_oop_selected_daemon}" "$1" "$2"
}

libnginx__peek() { ## 1:identifier
    liboop__peek__ "libnginx" "${libnginx_oop_selected_daemon}" "$1"
}

libnginx_select_daemon() {
    libnginx_oop_selected_daemon="$1"
}

libnginx_selected_daemon() {
    echo "${libnginx_oop_selected_daemon}"
}

#-----------------------------------------------------------------

libnginx__set_vars() {
    libnginx__daemon="$1"
    libnginx__content_source="$2"   #proxy|static
    libnginx__proxy__daemon="$3"
    libnginx__proxy__port="$4"

    libnginx_select_daemon "${libnginx__daemon}"
    liburl_select_daemon "${libnginx__daemon}"


    libnginx__poke content_source "${libnginx__content_source}" 
    libnginx__poke proxy__daemon "${libnginx__proxy__daemon}" 
    libnginx__poke proxy__port "${libnginx__proxy__port}" 


    libnginx__conf__dir="/etc/nginx/sites-available"
    libnginx__conf_enabled_dir="/etc/nginx/sites-enabled"

    libnginx__set_vars__ssl

    libnginx__server_name="$(liburl__peek server_name)"
    local dns__cname="$(liburl__peek dns__cname)"
    if [[ "_${dns__cname}" != "_" ]]; then
        libnginx__server_name="${dns__cname}"
    fi
    libnginx__poke server_name "${libnginx__server_name}" 


    local URL__protocol="$(liburl__peek URL__protocol)"

    libnginx__conf__file="${libnginx__server_name}.conf"
    libnginx__conf__listenstr="listen"

    libnginx__poke conf__file "${libnginx__conf__file}" 
    libnginx__poke conf__listenstr "${libnginx__conf__listenstr}" 

    if [[ "_${URL__protocol}" == "_https" ]]; then
        libnginx__conf__listenprotocol="ssl"
    else
        libnginx__conf__listenprotocol=""
    fi
    libnginx__conf__listen_port="${liburl__service_port}"
    libnginx__conf__protocol="${liburl__URL__protocol}"
    libnginx__poke conf__listenprotocol "${libnginx__conf__listenprotocol}" 
    libnginx__poke conf__listen_port "${libnginx__conf__listen_port}" 
    libnginx__poke conf__protocol "${libnginx__conf__protocol}" 


    if [[ "_${libnginx__content_source}" == "_" ]]; then
        >&2 echo "KO 88970 libnginx__set_vars requires arguments. ${ssn}."
        exit 1
    fi
    if [[ "_${libnginx__content_source}" == "_static" ]]; then
        libnginx__set_vars__static
    elif [[ "_${libnginx__content_source}" == "_proxy" ]]; then
        libnginx__set_vars__proxy
    else
        >&2 echo "KO 45442 Invalid content source ${libnginx__content_source}. ${ssn}"
        exit 1
    fi
}

libnginx__vars__echo() {
    libnginx__daemon="$1"
    libnginx_select_daemon "${libnginx__daemon}"
    cat << EOF
# libnginx =# ${ssn}
libnginx__conf__dir="${libnginx__conf__dir}"
libnginx__conf__file="$(libnginx__peek conf__file)"
libnginx__conf_enabled_dir="${libnginx__conf_enabled_dir}"

EOF
    libnginx__vars__echo__ssl
    cat << EOF
# libnginx - site =# ${ssn}
libnginx_oop_selected_daemon="${libnginx_oop_selected_daemon}"
libnginx__server_name="$(libnginx__peek server_name)"
libnginx__conf__listenstr="$(libnginx__peek conf__listenstr)"
libnginx__conf__listenprotocol="$(libnginx__peek conf__listenprotocol)"
libnginx__conf__protocol="$(libnginx__peek conf__protocol)"
libnginx__conf__listen_port="$(libnginx__peek conf__listen_port)"
libnginx__content_source="$(libnginx__peek content_source)"

EOF
    if [[ "_$(libnginx__peek content_source)" == "_static" ]]; then
        libnginx__vars__echo__static
    else
        libnginx__vars__echo__proxy
    fi
}

libnginx__CORS_header() {
    local url=$1
    echo "    add_header 'Access-Control-Allow-Origin' '${url}' always;"
}

libnginx__gen_site() {
    local jail=$1
    local daemon=$2
    local headers_fn=$3
    libnginx_select_daemon "$daemon"
    if [[ "_$(libnginx__peek content_source)" == "_static" ]]; then
        libnginx__gen_site__static ${jail} ${headers_fn}
    else
        libnginx__gen_site__proxy ${jail} ${headers_fn}
    fi
    if [[ "_${liburl__URL__protocol}" == "_https" ]]; then
        mkdir -p ${jail}/${libnginx__ssl_cert_dir}
        mkdir -p ${jail}/${libnginx__ssl_private_dir}
        if [[ ! -f ${liburl__ssl_certs}/${libnginx__ssl_cert_file} ]]; then
            >&2 echo "KO 55666 The following files must exist:"
            >&2 echo "  * ${liburl__ssl_certs}/${liburl__key_file}"
            >&2 echo "  * ${liburl__ssl_certs}/${liburl__cert_file}"
            >&2 echo "To fix the situation:"
            >&2 echo "*3rd party issuers ...... place cert and key in aforementioned filenames."
            >&2 echo "*self-signed ............ devtool create_SSL_cert ${liburl__domain}"
            exit 1
        fi
        cp ${liburl__ssl_certs}/${libnginx__ssl_cert_file} ${jail}/${libnginx__ssl_cert_dir}/
        cp ${liburl__ssl_certs}/${libnginx__ssl_key_file} ${jail}/${libnginx__ssl_private_dir}/
    fi
    mkdir -p ${jail}/etc/nginx/conf.d
    echo "server_names_hash_bucket_size 128;" > ${jail}/etc/nginx/conf.d/script_tv.conf

}

## ------------------------------impl-------------------------------------------------------------------------------

libnginx__gen_site__snippet_sslcert() {
    if [[ "_${liburl__URL__protocol}" != "_https" ]]; then
        return
    fi
    cat << EOF
    ssl_certificate      ${libnginx__ssl_cert_dir}/${libnginx__ssl_cert_file};
    ssl_certificate_key  ${libnginx__ssl_private_dir}/${libnginx__ssl_key_file};

    ssl_session_cache shared:SSL:1m;
    ssl_session_timeout  5m;

EOF
}

libnginx__user_headers() {
    if [[ "_${headers_fn}" == "_" ]]; then
        return
    fi
    ${headers_fn}
    echo
}

libnginx__gen_site__static__stdout() {
    local headers_fn=$1
    libnginx__server_name="$(libnginx__peek server_name)"
    libnginx__conf__listenstr="$(libnginx__peek conf__listenstr)"
    libnginx__conf__listenprotocol="$(libnginx__peek conf__listenprotocol)"
    libnginx__conf__protocol="$(libnginx__peek conf__protocol)"
    libnginx__conf__listen_port="$(libnginx__peek conf__listen_port)"
    libnginx__content_source="$(libnginx__peek content_source)"
    libnginx__static_content_dir="$(libnginx__peek static_content_dir)"
    libnginx__static__conf__root="$(libnginx__peek static__conf__root)"
    libnginx__static__index="$(libnginx__peek static__index)"

    if [[ "_${libnginx__server_name}" == "_docs.script.tv"   ]]; then                            ## SPIKE: fastest patch
        SPIKE__libnginx__additional_servername="    server_name whitepaper.script.tv;"           ## SPIKE: fastest patch
    else                                                                                         ## SPIKE: fastest patch
        SPIKE__libnginx__additional_servername=""                                                ## SPIKE: fastest patch
    fi                                                                                           ## SPIKE: fastest patch

    cat << EOF
server {
    ${libnginx__conf__listenstr} ${libnginx__conf__listen_port} ${libnginx__conf__listenprotocol};
    ${libnginx__conf__listenstr} [::]:${libnginx__conf__listen_port} ${libnginx__conf__listenprotocol};
    server_name ${libnginx__server_name};
${SPIKE__libnginx__additional_servername}
    root  ${libnginx__static__conf__root};
    index ${libnginx__static__index};
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-XSS-Protection "1; mode=block";
    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-Content-Type-Options nosniff;

EOF
    libnginx__user_headers ${headers_fn}
    libnginx__gen_site__snippet_sslcert

    local flags=$(libweb__peek flags)
    echo $flags | xargs -n1 | grep "distributor&web" > /dev/null
    if [[ $? -eq 0 ]]; then
        cat << EOF
        location ~ /files/ {
            autoindex on;
        }
EOF
    fi
    cat << EOF
    location ~ / {
EOF
    local flags=$(libweb__peek flags)
    echo $flags | xargs -n1 | grep "autoindex" > /dev/null
    if [[ $? -eq 0 ]]; then
        cat << EOF
        autoindex on;
EOF
    else
        cat << EOF
        try_files \$uri \$uri/ /${libnginx__static__index};
EOF
    fi
    cat << EOF
    }
}
EOF
}

libnginx__gen_site__static() {
    local jail=$1
    local headers_fn=$2
    libnginx__conf__file="$(libnginx__peek conf__file)"
    cat << EOF
###############################################################################################################
##   nginx site (static content): ${libnginx__conf__file}
###############################################################################################################
EOF
    mkdir -p $(dirname ${jail}${libnginx__conf__dir}/${libnginx__conf__file})
    libnginx__gen_site__static__stdout $headers_fn  | tee ${jail}${libnginx__conf__dir}/${libnginx__conf__file} | sed "s~^\(.*\)~## \1~"
    cat << EOF  
###############################################################################################################

EOF
}

libnginx__gen_site__proxy__stdout() {
    local headers_fn=$1
    libnginx__server_name="$(libnginx__peek server_name)"
    libnginx__conf__listenstr="$(libnginx__peek conf__listenstr)"
    libnginx__conf__listenprotocol="$(libnginx__peek conf__listenprotocol)"
    libnginx__conf__protocol="$(libnginx__peek conf__protocol)"
    libnginx__conf__listen_port="$(libnginx__peek conf__listen_port)"
    libnginx__content_source="$(libnginx__peek content_source)"
    libnginx__proxy__daemon="$(libnginx__peek proxy__daemon)"
    libnginx__proxy__svc_name="$(libnginx__peek proxy__svc_name)"
    libnginx__proxy__port="$(libnginx__peek proxy__port)"
    libnginx__proxy__pass="$(libnginx__peek proxy__pass)"

    cat << EOF
server {
    ${libnginx__conf__listenstr} ${libnginx__conf__listen_port} ${libnginx__conf__listenprotocol};
    ${libnginx__conf__listenstr} [::]:${libnginx__conf__listen_port} ${libnginx__conf__listenprotocol};
    server_name ${libnginx__server_name};

    proxy_read_timeout 60;
    proxy_connect_timeout 60;

EOF
    libnginx__user_headers ${headers_fn}
    libnginx__gen_site__snippet_sslcert
    cat << EOF
    location / {
        proxy_pass ${libnginx__proxy__pass};
        proxy_set_header Host \$http_host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }
}
EOF
}


libnginx__gen_site__proxy() {
    local jail=$1
    local headers_fn=$2
    libnginx__conf__file="$(libnginx__peek conf__file)"
    mkdir -p $(dirname ${jail}${libnginx__conf__dir}/${libnginx__conf__file})
    cat << EOF  
###############################################################################################################
##   nginx site (proxied content): ${libnginx__conf__file}
###############################################################################################################
EOF
    libnginx__gen_site__proxy__stdout $headers_fn | tee ${jail}${libnginx__conf__dir}/${libnginx__conf__file} | sed "s~^\(.*\)~## \1~"
    cat << EOF  
###############################################################################################################
EOF
}

## --------------------------------------------------------------------------------------


libnginx__set_vars__ssl() {
    libnginx__ssl_cert_dir="/etc/nginx/ssl/cert"
    libnginx__ssl_private_dir="/etc/nginx/ssl/private"
    libnginx__ssl_key_owner="root"
    libnginx__ssl_key_perms="600"
    libnginx__ssl_cert_file="$(liburl__peek cert_file)"
    libnginx__ssl_key_file="$(liburl__peek key_file)"
    libnginx__poke ssl_cert_file "${libnginx__ssl_cert_file}" 
    libnginx__poke ssl_key_file "${libnginx__ssl_key_file}" 
}

libnginx__vars__echo__ssl() {
    if [[ "_${liburl__URL__protocol}" != "_https" ]]; then
        return
    fi
    cat << EOF
# libnginx - SSL =# ${ssn}
libnginx__ssl_cert_dir="${libnginx__ssl_cert_dir}"
libnginx__ssl_private_dir="${libnginx__ssl_private_dir}"
libnginx__ssl_cert_file="$(libnginx__peek ssl_cert_file)"
libnginx__ssl_key_file="$(libnginx__peek ssl_key_file)"
libnginx__ssl_key_owner="${libnginx__ssl_key_owner}"
libnginx__ssl_key_perms="${libnginx__ssl_key_perms}"

EOF
}

libnginx__set_vars__static() {
    libnginx__static_content_dir="/var/www"
    libnginx__static__conf__root="${libnginx__static_content_dir}/${libweb__www_subdir}"
    libnginx__static__index="index.html"
    libnginx__poke static_content_dir "${libnginx__static_content_dir}" 
    libnginx__poke static__conf__root "${libnginx__static__conf__root}" 
    libnginx__poke static__index "${libnginx__static__index}" 
}

libnginx__vars__echo__static() {
    cat << EOF
# libnginx - static =# ${ssn}
libnginx__static_content_dir="$(libnginx__peek static_content_dir)"
libnginx__static__conf__root="$(libnginx__peek static__conf__root)"
libnginx__static__index="$(libnginx__peek static__index)"

EOF
}

libnginx__proxy_port__svcname() {
    local daemon="$1"
    if [[ $(type -t libsystemd__proxy_port__svcname) == function ]]; then 
        echo $(libsystemd__proxy_port__svcname "${daemon}")
    else
        echo ""
    fi
}

libnginx__set_vars__proxy() {
    libnginx__proxy__pass="http://127.0.0.1:${libnginx__proxy__port}"
    libnginx__proxy__svc_name=$(libnginx__proxy_port__svcname "${libnginx__proxy__daemon}")
    libnginx__poke proxy__pass "${libnginx__proxy__pass}" 
    libnginx__poke proxy__svc_name "${libnginx__proxy__svc_name}" 

}

libnginx__vars__echo__proxy() {
    cat << EOF
# libnginx - reverse proxy =# ${ssn}
libnginx__proxy__daemon="$(libnginx__peek proxy__daemon)"
libnginx__proxy__svc_name="$(libnginx__peek proxy__svc_name)"
libnginx__proxy__port="$(libnginx__peek proxy__port)"
libnginx__proxy__pass="$(libnginx__peek proxy__pass)"

EOF
}

libnginx__libfn() {
:
}

libnginx__steps__pre_install() {
    if [[ -f ${once_guard_prefix}_${m}_libnginx__steps__pre_install ]]; then
        return
    else
        touch ${once_guard_prefix}_${m}_libnginx__steps__pre_install
    fi

    cat << EOF
#    echo "WA 66857 WARNING REMOVE THIS!!" 
    rm -f /etc/nginx/sites-enabled/*

    if systemctl list-unit-files | grep -q "apache2.service"; then
        echo "Apache2 is installed. Disabling and stopping..."
        systemctl disable apache2 --now
        apt remove --purge apache2 -y
        apt autoremove -y
    fi

EOF
}

libnginx__steps__post_install__cert() {
    libnginx__ssl_key_file="$(libnginx__peek ssl_key_file)"
    if [[ -f ${once_guard_prefix}_${m}_libnginx__steps__post_install__cert__${libnginx__ssl_key_file} ]]; then
        return
    else
        touch ${once_guard_prefix}_${m}_libnginx__steps__post_install__cert__${libnginx__ssl_key_file}
    fi
    if [[ "_${liburl__URL__protocol}" == "_https" ]]; then
        cat << EOF
if [[ -f ${libnginx__ssl_private_dir}/${libnginx__ssl_key_file} ]]; then
    chown ${libnginx__ssl_key_owner}:${libnginx__ssl_key_owner} ${libnginx__ssl_private_dir}/${libnginx__ssl_key_file}
    chmod ${libnginx__ssl_key_perms} ${libnginx__ssl_private_dir}/${libnginx__ssl_key_file}
fi
EOF
    fi
}

libnginx__steps__post_install() {
    libnginx_select_daemon "$1"
    libnginx__conf__file="$(libnginx__peek conf__file)"
    libnginx__steps__post_install__cert
    if [[ -f ${once_guard_prefix}_${m}_libnginx__steps__post_install__${libnginx__conf__file} ]]; then
        return
    else
        touch ${once_guard_prefix}_${m}_libnginx__steps__post_install__${libnginx__conf__file}
    fi
    cat << EOF
    libnginx__ssl_key_file="$(libnginx__peek ssl_key_file)"
    let nginx_down=0
    if [[ ! -f ${libnginx__ssl_private_dir}/${libnginx__ssl_key_file} ]]; then
        let nginx_down=1
        mkdir -p /var/${system_unix_name}/svc/disabled
        echo "SSL certs not configured. nginx not started. GUI URL's are not available." > /var/${system_unix_name}/svc/disabled/nginx
    else
        rm -f /var/${system_unix_name}/svc/disabled/nginx
    fi
    if [[ -f ${libnginx__conf__dir}/${libnginx__conf__file} ]]; then
        rm -f ${libnginx__conf_enabled_dir}/${libnginx__conf__file}
        if [[ \$nginx_down -eq 0 ]]; then
            #symlink sites anyway, but be quiet if ssl cers are not set up yet
            echo "libnginx: enabling site ${libnginx__conf_enabled_dir}/${libnginx__conf__file}"
        fi
        ln -s ${libnginx__conf__dir}/${libnginx__conf__file} ${libnginx__conf_enabled_dir}/
    fi
EOF
}

libnginx__steps__pre_uninstall() {
    libnginx_select_daemon "$1"
    libnginx__conf__file="$(libnginx__peek conf__file)"
    if [[ -f ${once_guard_prefix}_${m}_libnginx__steps__post_uninstall__${libnginx__conf__file} ]]; then
        return
    else
        touch ${once_guard_prefix}_${m}_libnginx__steps__post_uninstall__${libnginx__conf__file}
    fi
    cat << EOF
echo "libnginx: deleting symlink ${libnginx__conf_enabled_dir}/${libnginx__conf__file}"
rm -f ${libnginx__conf_enabled_dir}/${libnginx__conf__file}
EOF
}

libnginx__steps__post_uninstall() {
    cat << EOF
if systemctl is-active --quiet nginx; then
  systemctl reload nginx
fi
EOF
}

libnginx__declare_URLs() {
:
}

libnginx__declare_listening_tcp_ports() {
:
}

libnginx__systemctl_services() {
:
}


function libnginx__systemctl_services__shared {
    if [[ -f ${once_guard_prefix}_${m}_systemctl_services__shared ]]; then
        return
    else
        touch ${once_guard_prefix}_${m}_systemctl_services__shared
    fi
    echo "nginx"
}

function libnginx__constructor {
:
}

