#!/bin/bash

function libweb__deps_build__apt {
    if [[ "_${libweb__tech}" == "_noweb" ]]; then
        return
    fi
    lib${libweb__tech}__deps_build__apt
    liburl__deps_build__apt
}

function libweb__deps_runtime__apt {
    if [[ "_${libweb__tech}" == "_noweb" ]]; then
        return
    fi
    lib${libweb__tech}__deps_runtime__apt
    liburl__deps_runtime__apt
}

#-----------------------------------------------------------------
#    libOOP - class stcfg 
#-----------------------------------------------------------------

libweb_oop_selected_daemon=""

function libweb__poke { ## 1:identifier 3:value
    liboop__poke__ "libweb" "${libweb_oop_selected_daemon}" "$1" "$2"
}

function libweb__peek { ## 1:identifier
    liboop__peek__ "libweb" "${libweb_oop_selected_daemon}" "$1"
}

function libweb_select_daemon {
    libweb_oop_selected_daemon="$1"
}

function libweb_selected_daemon {
    echo "${libweb_oop_selected_daemon}"
}

#-----------------------------------------------------------------

libweb__checknumfiles=10

function libweb__set_vars {  #1:<class-instance> 2:<content_source> 3:<proxy__daemon> 4:<proxy__port> 5:<hostname> 6:<path>
    libweb__daemon="$1"
    libweb_select_daemon "${libweb__daemon}"
    libweb__content_source="$2"   #proxy|static
    libweb__proxy__daemon="$3"
    libweb__proxy__port="$4"
    libweb__hostname="$5"
    libweb__path="$6"
    libweb__flags="$7"

    libweb__service_port__http=80 
    libweb__service_port__https=443 # see /doc/TN/TN_1
    libweb__www_subdir="${system_unix_name}/${ss_tgt_path}"
    libweb__htdocs_dir="/var/www/${libweb__www_subdir}"

    libweb__poke content_source "${libweb__content_source}"
    libweb__poke proxy__daemon "${libweb__proxy__daemon}"
    libweb__poke proxy__port "${libweb__proxy__port}"
    libweb__poke hostname "${libweb__hostname}"
    libweb__poke path "${libweb__path}"
    libweb__poke flags "${libweb__flags}"

    libweb__poke service_port__http "${libweb__service_port__http}" 
    libweb__poke service_port__https "${libweb__service_port__https}"
    libweb__poke www_subdir "${libweb__www_subdir}"
    libweb__poke htdocs_dir "${libweb__htdocs_dir}"

    liburl__set_vars "${libweb__daemon}" "${libweb__hostname}" "${libweb__path}" "" "https" "${libweb__service_port__https}"
    lib${libweb__tech}__set_vars "${libweb__daemon}" "${libweb__content_source}" "${libweb__proxy__daemon}" "${libweb__proxy__port}"
}

function libweb__vars__echo {
    libweb__daemon="$1"
    libweb_select_daemon "${libweb__daemon}"
    if [[ "_${libweb__tech}" == "_noweb" ]]; then
        return
    fi
    liburl__vars__echo $@
    lib${libweb__tech}__vars__echo $@
	cat << EOF
# libweb =# ${ssn}
libweb_oop_selected_daemon="${libweb_oop_selected_daemon}"
libweb__tech="${libweb__tech}"
libweb__service_port__http="$(libweb__peek service_port__http)"
libweb__service_port__https="$(libweb__peek service_port__https)"
libweb__www_subdir="$(libweb__peek www_subdir)"
libweb__htdocs_dir="$(libweb__peek htdocs_dir)"
libweb__content_source="$(libweb__peek content_source)"   #proxy|static
libweb__proxy__daemon="$(libweb__peek proxy__daemon)"
libweb__proxy__port="$(libweb__peek proxy__port)"
libweb__hostname="$(libweb__peek hostname)"
libweb__path="$(libweb__peek path)"

EOF
}

function libweb__CORS_header {
    lib${libweb__tech}__CORS_header $@
}

function libweb__CORS__allow_public_unrestricted_access {
    lib${libweb__tech}__CORS_header "*"
}

function libweb__gen_site {
    jail="$1"
    libweb__daemon="$2"
    headers_fn=$3
    libweb_select_daemon "${libweb__daemon}"
    if [[ "_${libweb__tech}" == "_noweb" ]]; then
        >&2 print_stack
        >&2 "KO 76883 Unexpected."
        exit 1
    fi
    lib${libweb__tech}__gen_site "${jail}" "${libweb__daemon}" $headers_fn
}

function libweb__target_htdocsdir {
    libweb_select_daemon "${libweb__daemon}"
    if [[ "_${libweb__tech}" == "_noweb" ]]; then
        >&2 print_stack
        >&2 "KO 76884 Unexpected."
        exit 1
    fi
    echo "$(libweb__peek htdocs_dir)"
}

function libweb__libfn {
    lib${libweb__tech}__libfn $@
}

function libweb__steps__pre_install {
    libweb__daemon="$1"
    libweb_select_daemon "${libweb__daemon}"
    lib${libweb__tech}__steps__pre_install "${libweb__daemon}"
}

function libweb__steps__post_install {
    libweb__daemon="$1"
    libweb_select_daemon "${libweb__daemon}"
    lib${libweb__tech}__steps__post_install "${libweb__daemon}"
}

function libweb__steps__pre_uninstall {
    libweb__daemon="$1"
    libweb_select_daemon "${libweb__daemon}"
    lib${libweb__tech}__steps__pre_uninstall "${libweb__daemon}"
}

function libweb__steps__post_uninstall {
    libweb__daemon="$1"
    libweb_select_daemon "${libweb__daemon}"
    lib${libweb__tech}__steps__post_uninstall "${libweb__daemon}"
    if [[ "_$(libweb__peek content_source)" == "_static" ]]; then
        echo "#rm -rf $(libweb__peek htdocs_dir)"  #TODO: review
    fi
}

function libweb__info {
    libweb__daemon="$1"
    libweb_select_daemon "${libweb__daemon}"
    if [[ "_${libweb__tech}" == "_noweb" ]]; then
        return
    fi
    liburl__info "${libweb__daemon}"
}

function libweb__declare_listening_tcp_ports {
    libweb__daemon="$1"
    libweb_select_daemon "${libweb__daemon}"
    liburl__declare_listening_tcp_ports "${libweb__daemon}"
}

function libweb__systemctl_services {
:
}

function libweb__systemctl_services__shared {
    if [[ "_${libweb__tech}" == "_noweb" ]]; then
        return
    fi
    echo "${libweb__tech}"
}

function libweb__amend {
    if [[ "_${libweb__tech}" == "_noweb" ]]; then
        return
    fi
    local jail="$1"
    libweb__daemon="$2"
    libweb_select_daemon "${libweb__daemon}"
    if [[ "_$(libweb__peek content_source)" == "_static" ]]; then
        mk_target__amend__dont_uninstall_files_in "${jail}" "$(libweb__peek htdocs_dir)"
    fi
}

function libweb__constructor {
    libweb__tech=$1

    . /usr/local/lib/dtool/mk_target/libbuild_URL.env
    liburl__constructor

    if [[ "_${libweb__tech}" == "_" ]]; then
        libweb__tech="nginx"
    fi
    . /usr/local/lib/dtool/mk_target/libbuild_${libweb__tech}.env
    lib${libweb__tech}__constructor
}


