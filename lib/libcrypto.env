#!/bin/bash

libcrypto__ssl_cert__file_for() {
    local domain=$1
    echo "${libcrypto__ssl_pub_dir}/${domain}.crt"
}

libcrypto__ssl_cert__key__file_for() {
    local domain=$1
    echo "${libcrypto__ssl_secret_dir}/${domain}.key"
}

libcrypto__ca_cert__file_for() {
    local ca_domain=$1
    echo "${libcrypto__ca_pub_dir}/${ca_domain}__CA.crt"
}

libcrypto__ca_cert__key__file_for() {
    local ca_domain=$1
#>&2    echo "--> ${libcrypto__ca_secret_dir}/${ca_domain}__CA.key"
    echo "${libcrypto__ca_secret_dir}/${ca_domain}__CA.key"
}

libcrypto__can_sign_CSR() {
    local ca_domain="$1"
    local CA_crt__key=$(libcrypto__ca_cert__key__file_for ${ca_domain})
    if [[ -f ${CA_crt__key} ]]; then  # if we are not the authority we use its api
        echo "true"
        return
    fi
    echo "false"
}

libcrypto__verify_cert() {
    local ca_file=$1
    local crt_file=$2
#>&2 echo "verifying ${ca_file} ${crt_file}"
    openssl verify -CAfile "${ca_file}" "${crt_file}" >/dev/null 2>/dev/null
}

libcrypto__sign_CSR() { # prints cert
    local domain="$1"
    local ca_domain="$2"
    local csr_file="$3"
    local cfg_file="$4"
    local pub_cert_file=$5
    local CA_crt__file=$(libcrypto__ca_cert__file_for ${ca_domain})  # ${libcrypto__ca_pub_dir}/${ca_domain}__CA.crt
    local CA_crt__key=$(libcrypto__ca_cert__key__file_for ${ca_domain}) #${libcrypto__ca_secret_dir}/${ca_domain}__CA.key
    local CA_srl__file=${libcrypto__ca_secret_dir}/${ca_domain}__CA.srl
#>&2 echo "libcrypto__sign_CSR domain ${domain}"
#>&2 echo "libcrypto__sign_CSR ca_domain ${ca_domain}"
#>&2 echo "libcrypto__sign_CSR CA_crt__file ${CA_crt__file}"
#>&2 echo "libcrypto__sign_CSR CA_crt__key ${CA_crt__key}"
#echo "CA_srl__file: ${CA_srl__file}"
    if [[ ! -f ${CA_crt__file} ]]; then
        >&2 echo "KO 66509"
        exit 1
    fi
    if [[ ! -f ${CA_crt__key} ]]; then
        >&2 echo "KO 66510"
        exit 1
    fi

    if [[ ! -f ${CA_srl__file} ]]; then
        date +%s%N | cut -b1-10 > ${CA_srl__file}
    fi
    if [[ $(libcrypto__can_sign_CSR "${ca_domain}") != "true" ]]; then
        >&2 echo "KO 66059 I can't sign the CSR"
        return 1
    fi

    #echo "${CA_crt__key} exists, producing cert ${pub_cert_file}"
#    ls -la "${csr_file}"
#    ls -la "${CA_crt__file}"
#    ls -la "${CA_crt__key}"
#    ls -la "${CA_srl__file}"
#    ls -la ${cfg_file}
#echo ":${CA_crt__file}"
#ls -la ${CA_crt__file}

    openssl x509 -req -days 365 -in "${csr_file}" -CA "${CA_crt__file}" -CAkey "${CA_crt__key}" -CAserial "${CA_srl__file}" -out "${pub_cert_file}" -extfile ${cfg_file} -extensions ext >/dev/null 2>/dev/null
    if [[ $? -ne 0 ]]; then
        >&2 echo "command:"
        >&2 echo "openssl x509 -req -days 365 -in ${csr_file} -CA ${CA_crt__file} -CAkey ${CA_crt__key} -CAserial ${CA_srl__file} -out ${pub_cert_file} -extfile ${cfg_file} -extensions ext"
        >&2 echo "produced:"
        >&2 openssl x509 -req -days 365 -in "${csr_file}" -CA "${CA_crt__file}" -CAkey "${CA_crt__key}" -CAserial "${CA_srl__file}" -out "${pub_cert_file}" -extfile ${cfg_file} -extensions ext
        >&2 echo "KO 87445 Failed to generate certificate."
        exit 1
    fi
#    ls -la "${pub_cert_file}"
    openssl verify -CAfile "${CA_crt__file}" "${pub_cert_file}" >/dev/null 2>/dev/null
    if [[ $? -ne 0 ]]; then
        >&2 echo "command:"
        >&2 echo "openssl verify -CAfile ${CA_crt__file} ${pub_cert_file}"
        >&2 echo "produces:"
        >&2 openssl verify -CAfile "${CA_crt__file}" "${pub_cert_file}"
        >&2 echo "KO 54093 CA certificate doesn't verify."
        rm -f ${pub_cert_file}
        return 1
    fi
    cat ${CA_crt__file} >> ${pub_cert_file}
    return 0
}

check_ca_cert() {
    local ca_domain="$1"
    local CA_crt__file=$(libcrypto__ca_cert__file_for ${ca_domain})  # ${libcrypto__ca_pub_dir}/${ca_domain}__CA.crt
    openssl verify -CAfile "${CA_crt__file}" "${CA_crt__file}" >/dev/null 2>/dev/null
    if [[ $? -ne 0 ]]; then
        >&2 echo "command:"
        >&2 echo "openssl verify -CAfile ${CA_crt__file} ${CA_crt__file}"
        >&2 echo "produces:"
        >&2 openssl verify -CAfile "${CA_crt__file}" "${CA_crt__file}"
        >&2 echo "KO 30291 CA certificate doesn't verify."
        return 1
    fi
    return 0
}

check_ssl_cert() {
    local domain="$1"
    local crt__file=$(libcrypto__ssl_cert__file_for ${domain})  # ${libcrypto__ca_pub_dir}/${ca_domain}__CA.crt
    openssl verify -CAfile "${crt__file}" "${crt__file}" >/dev/null 2>/dev/null
    if [[ $? -ne 0 ]]; then
        >&2 echo "command:"
        >&2 echo "openssl verify -CAfile ${crt__file} ${crt__file}"
        >&2 echo "produces:"
        >&2 openssl verify -CAfile "${crt__file}" "${crt__file}"
        >&2 echo "KO 30292 certificate doesn't verify."
        return 1
    fi
    return 0
}

libcrypto__create_ssl_cert() {
    local domain="$1"
    local ca_domain="$2"

    if [[ -z "$domain" ]]; then
        >&2 echo "KO 65248 Missing required parameters."
        exit 1
    fi

    if ! check_ca_cert ${ca_domain}; then
        exit 1
    fi

    local cert_file=$(libcrypto__ssl_cert__file_for $domain)
    if [[ -f "${cert_file}" ]]; then
        #echo "Cert already exists: ${cert_file}"
        return 0
    fi
    #echo "Cert doesn't  exist. creating ${cert_file}"

    local key_file=$(libcrypto__ssl_cert__key__file_for ${domain})

    # Generate the wildcard certificate private key
    if [[ ! -f ${key_file} ]]; then
        mkdir -p $(dirname ${key_file})
        openssl genpkey -algorithm RSA -out "${key_file}" -pkeyopt rsa_keygen_bits:2048 >/dev/null 2>/dev/null
        if [[ $? -ne 0 ]]; then
            >&2 echo "command:"
            >&2 echo "openssl genpkey -algorithm RSA -out ${key_file} -pkeyopt rsa_keygen_bits:2048"
            >&2 echo "output:"
            >&2 openssl genpkey -algorithm RSA -out "${key_file}" -pkeyopt rsa_keygen_bits:2048
            >&2 echo "KO 20419 Failed to generate private key."
            exit 1
        fi
    fi
#echo "domain ssl: $domain"
#echo ${key_file}
#echo "using key $(cat ${key_file} | sha256sum | awk '{ print $1 }')"

    local csr=$(mktemp /tmp/csr.XXXXXX.csr)
    local cfg=$(mktemp /tmp/cfg.XXXXXX.cnf)

    # Step 2: Create the CSR configuration file
    cat << EOF > ${cfg}
[req]
distinguished_name = req_distinguished_name
req_extensions = ext
prompt = no

[req_distinguished_name]
countryName = UK
stateOrProvinceName = London
localityName = London
organizationalUnitName = cto
commonName = *.${domain}

[ext]
basicConstraints = CA:FALSE
keyUsage = nonRepudiation, digitalSignature, keyEncipherment, dataEncipherment
extendedKeyUsage = serverAuth
subjectAltName = @alt_names

[ alt_names ]
DNS.1 = *.${domain}
DNS.2 = ${domain}
EOF
    # Step 3: Generate the CSR
    openssl req -new -key "${key_file}" -out "${csr}" -config ${cfg} > /dev/null 2>/dev/null
    if [[ $? -ne 0 ]]; then
        >&2 echo "command:"
        >&2 echo "openssl req -new -key ${key_file} -out ${csr} -config ${cfg}"
        >&2 echo "output:"
        >&2 openssl req -new -key "${key_file}" -out "${csr}" -config ${cfg}
        >&2 echo "KO 76445 Failed to generate CSR for ${domain}."
        rm -f $csr
        rm -f $cfg
        exit 1
    fi

    mkdir -p $(dirname ${cert_file})
    libcrypto__sign_CSR "${domain}" "${ca_domain}" ${csr} ${cfg} ${cert_file}
    if [[ $? -ne 0 ]]; then
        >&2 echo "KO 40284"
        exit 1
    fi
    if [[ ! -f ${cert_file} ]]; then
        >&2 cat ${csr}
        >&2 echo "KO 79684 Cannot sign CSR"
        rm -f ${csr}
        rm -f ${cfg}
        exit 1
    fi

    # Cleanup
    rm -f ${csr}
    rm -f ${cfg}
    #echo "SSL certificate for domain ${domain} and key have been successfully created."

#    echo "ssl cert at ${cert_file}"
#    echo "using cert $(cat ${cert_file} | sha256sum | awk '{ print $1 }')"
}

libcrypto__create_root_CA_cert() {
    local domain="$1"
    local pub_cert_file=$(libcrypto__ca_cert__file_for ${domain})
    local key_file=$(libcrypto__ca_cert__key__file_for ${domain})
    local srl_file=${libcrypto__ca_secret_dir}/${domain}__CA.srl             #cert issuance serial
    if [[ -z "$domain" || -z "$pub_cert_file" || -z "$key_file" || -z "$srl_file" ]]; then
        >&2 echo "KO 65748 Missing required parameters."
        exit 1
    fi
    # Step 1: Generate the CA key
    if [[ ! -f ${key_file} ]]; then
        echo "${key_file} not found, producing new key"
        openssl genpkey -algorithm RSA -out "${key_file}" -pkeyopt rsa_keygen_bits:2048
        if [[ $? -ne 0 ]]; then
            >&2 echo "KO 10119 Failed to generate CA private key."
            rm -f ${key_file}
            exit 1
        fi
    fi
    if [[ ! -f ${srl_file} ]]; then
        date +%s%N | cut -b1-10 > ${srl_file}
    fi
    if [[ -f ${pub_cert_file} ]]; then
        >&2 echo "KO 59483 Cert already exists: ${pub_cert_file}"
        exit 1
    fi
    echo "producing ROOT cert"
    local subj="/C=UK/ST=Eng/L=London/O=Script Network/OU=$domain/CN=Script Network Root-CA $domain"
    openssl req -x509 -new -key "${key_file}" -sha256 -days 3650 -out "${pub_cert_file}" -subj "${subj}"
    if [[ $? -ne 0 ]]; then
        >&2 echo "KO 10229 Failed to generate CA certificate."
        exit 1
    fi
    echo "Root CA for ${domain} has been successfully created."
}

libcrypto__create_CA_cert__CSR() {
    local domain="$1"
    local ca_domain="$2"
    local csr=$3
    local cfg=$4
    #echo "libcrypto__create_CA_cert__CSR ${domain} ${ca_domain}"

    local pub_cert_file=$(libcrypto__ca_cert__file_for ${domain})
    local key_file=$(libcrypto__ca_cert__key__file_for ${domain})
    local srl_file=${libcrypto__ca_secret_dir}/${domain}__CA.srl             #cert issuance serial
    if [[ -z "$domain" || -z $ca_domain || -z "$pub_cert_file" || -z "$key_file" || -z "$srl_file" ]]; then
        >&2 echo "KO 65748 Missing required parameters."
        exit 1
    fi
    # Step 1: Generate the intermediary CA key
    if [[ ! -f ${key_file} ]]; then
        #echo "${key_file} not found, producing new key for the intermediary CA"
        openssl genpkey -algorithm RSA -out "${key_file}" -pkeyopt rsa_keygen_bits:2048 >/dev/null 2>/dev/null
        if [[ $? -ne 0 ]]; then
            >&2 echo "KO 10119 Failed to generate intermediary CA private key."
            rm -f ${key_file}
            exit 1
        fi
    fi
    if [[ ! -f ${srl_file} ]]; then
        date +%s%N | cut -b1-10 > ${srl_file}
    fi
    if [[ -f ${pub_cert_file} ]]; then
        >&2 echo "KO 06982 Cert already exists: ${pub_cert_file}"
        exit 1
    fi

    # Step 2: Generate CSR
    #echo "Using keyfile ${key_file} to produce CSR"
    local subj="/C=UK/ST=Eng/L=London/O=Script Network/OU=$domain/CN=Script Network Subordinate-CA"
    openssl req -new -key "${key_file}" -out ${csr} -subj "${subj}" >/dev/null 2>/dev/null
    if [[ $? -ne 0 ]]; then
        >&2 echo "KO 10231 Failed generating CSR file."
        exit 1
    fi
    cat << EOF > ${cfg}
[ext]
basicConstraints = critical, CA:TRUE
keyUsage = critical, keyCertSign, cRLSign
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer

EOF
    #echo "Created CSR for ${domain} subordinate CA."
}

libcrypto__create_CA_cert() {
    local domain="$1"
    local ca_domain="$2"
    local csr=$(mktemp /tmp/csr.XXXXXX.csr)
    local cfg=$(mktemp /tmp/cfg.XXXXXX.cnf)
    libcrypto__create_CA_cert__CSR "${domain}" "${ca_domain}" ${csr} ${cfg}

    local pub_cert_file=$(libcrypto__ca_cert__file_for ${domain})
    libcrypto__sign_CSR "${domain}" "${ca_domain}" ${csr} ${cfg} "${pub_cert_file}"
    if [[ ! -f ${pub_cert_file} ]]; then
        >&2 echo "KO 61542 ${pub_cert_file} not found."
        exit 1
    fi
    rm -f ${cfg}
    rm -f ${csr}
    echo "CA-Cert ready at ${pub_cert_file}."
}

libcrypto__gen_CA_cert0() {
    local domain="$1"
    local ca_domain="$2"
    local pub_cert_file=$(libcrypto__ca_cert__file_for ${domain})
    if [[ ! -f ${pub_cert_file} ]]; then
        2>&1 libcrypto__create_CA_cert "${domain}" "${ca_domain}"
        if [[ ! -f ${pub_cert_file} ]]; then
            >&2 echo "KO 77069 CA cert."
            exit 1 
        fi
#    else
#        echo "Cert already exists at $pub_cert_file"
    fi
}

libcrypto__gen_CA_cert() {
    local domain="$1"
    local ca_domain="$2"
    libcrypto__gen_CA_cert0 "${domain}" "${ca_domain}"
    cat << EOF
=   CA ==============================
pub_cert_file=$(libcrypto__ca_cert__file_for ${domain})
= / CA ==============================

EOF
}

libcrypto__split_CA_cert() {
    local ca_domain=$1
    local dest=$2
    mkdir -p $dest
    local input_file="$(libcrypto__ca_cert__file_for ${ca_domain})"
    local output_prefix="${dest}/${ca_domain}__CA__part_"
    local count=1
    local certificate=""
#echo "=-=-=-=-"
    while IFS= read -r line; do
        if [[ "$line" == "-----BEGIN CERTIFICATE-----" ]]; then
            certificate="$line"$'\n'
        elif [[ "$line" == "-----END CERTIFICATE-----" ]]; then
            certificate+="$line"$'\n'
            echo "$certificate" > "${output_prefix}${count}.crt"
#        echo "${output_prefix}${count}.crt"
            count=$((count + 1))
            certificate=""
        else
            certificate+="$line"$'\n'
        fi
    done < "$input_file"
#echo "=-=-=-=-"
}

libcrypto__is_valid_CA_cert__dates() {
    local cert_file="$1"
    if [ -z "$cert_file" ]; then
        >&2 echo "KO 44039"
        return 1
    fi
    local dates=$(openssl x509 -in "$cert_file" -noout -dates) || {
        >&2 echo "KO 30291 Failed to retrieve dates from $cert_file"
        return 1
    }
    local notBefore notAfter
    notBefore=$(echo "$dates" | grep '^notBefore=' | cut -d'=' -f2-)
    notAfter=$(echo "$dates" | grep '^notAfter=' | cut -d'=' -f2-)
    if [ -z "$notBefore" ] || [ -z "$notAfter" ]; then
        >&2 echo "KO 10394 Could not parse certificate dates."
        return 1
    fi
    local nb_sec na_sec now_sec
    nb_sec=$(date --date="$notBefore" +%s)
    na_sec=$(date --date="$notAfter" +%s)
    now_sec=$(date +%s)
    if (( now_sec < nb_sec )); then
        >&2 echo "KO 60594 Certificate is not yet valid. Valid from: $notBefore"
        return 1
    elif (( now_sec > na_sec )); then
        >&2 echo "KO 44034 Certificate has expired. Expired on: $notAfter"
        return 1
    else
        return 0
    fi
}

libcrypto__check_time_diff() {
    local t1=$1
    local t2=$2
    local diff=$(( t1 > t2 ? t1 - t2 : t2 - t1 ))   # Calculate the absolute difference between the timestamps.
    if (( diff <= 5 )); then # Check if the difference is no more than 5 seconds.
        return 0  # Valid: difference is within 5 seconds.
    else
        return 1  # Invalid: difference is more than 5 seconds.
    fi
}

libcrypto__make_poo() { #Proof Of Ownership
    local sk=$1
    local pub=$2
    local address=$3
    local address_hex=$4

    local ts=$(date +%s)
    local msg="${ts} - I hold the private key of address ${address} ${address_hex}."
    local msgb58="$(echo "$msg" | scriptv b58 encode -)"
#    echo "=====> scriptv ec sign ${msgb58} ${priv}"
    local sig="$(scriptv ec sign ${msgb58} ${sk})"

    cat << EOF
address_hex ${address_hex}
address ${address}
pub ${pub}
emsg ${msgb58}
${sig}

EOF
}

libcrypto__check_poo() {
    local address_hex=$1
    local address=$2
    local pub=$3
    local emsg=$4
    local sig=$5
    scriptv hex check_address ${address_hex} > /dev/null
    if [[ $? -ne 0 ]]; then
        >&2 echo "KO 20199 Invalid hex address >>${address_hex}<<"
        return 1
    fi
    scriptv b58 check_address ${address} > /dev/null
    if [[ $? -ne 0 ]]; then
        >&2 echo "KO 20119 Invalid b58 address"
        return 1
    fi
    local pubaddr=$(scriptv ec pub_key ${pub} | grep "^addr " | awk '{ print $2 }')
    if [[ "$pubaddr" != "$address" ]]; then
        >&2 echo "KO 20118 Invalid public key or address mismatch."
        return 1
    fi
    local curts=$(date +%s)
    local msg=$(echo ${emsg} | scriptv b58 decode -)
    local ts=$(echo "$msg" | awk '{ print $1 }')
    if ! libcrypto__check_time_diff "${ts}" "${curts}"; then
        >&2 echo "KO 26508 Expired poo."
        return 1
    fi
    local msg1=$(echo "$msg" | awk '{$1=""; sub(/^ /, ""); print}')
    local expected_msg1="- I hold the private key of address ${address} ${address_hex}."
    if [[ "${msg1}" != "${expected_msg1}" ]]; then
        >&2 echo "KO 26509 Invalid message in poo."
        return 1
    fi
    scriptv ec verify ${emsg} ${sig} ${pub} > /dev/null
    if [[ $? -ne 0 ]]; then
        >&2 echo "KO 26510 Invalid signature in poo."
        return 1
    fi
    return 0
}

libcrypto__init() {
    local ca_secrets_dir="$1"
    local ca_pub_dir="$2"
    local ssl_secrets_dir="$3"
    local ssl_pub_dir="$4"
    if [[ -z "${ca_secrets_dir}" ]]; then
        >&2 echo "KO 66987 missing ca_secrets_dir"
        exit 1
    fi
    if [[ -z "${ca_pub_dir}" ]]; then
        >&2 echo "KO 66988 missing ca_pub_dir"
        exit 1
    fi
    mkdir -p ${ca_secrets_dir}
    libcrypto__ca_secret_dir=$(realpath ${ca_secrets_dir})
    mkdir -p ${ca_pub_dir}
    libcrypto__ca_pub_dir=$(realpath ${ca_pub_dir})

    libcrypto__ssl_secret_dir=""
    if [[ ! -z "${ssl_secrets_dir}" ]]; then
        mkdir -p ${ssl_secrets_dir}
        libcrypto__ssl_secret_dir=$(realpath ${ssl_secrets_dir})
    fi
    libcrypto__ssl_pub_dir=""
    if [[ ! -z "${ssl_pub_dir}" ]]; then
        mkdir -p ${ssl_pub_dir}
        libcrypto__ssl_pub_dir=$(realpath ${ssl_pub_dir})
    fi
}

