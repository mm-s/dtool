#!/bin/bash

r2r_dev2dev__deps_runtime__apt() {
    echo ""
}

r2r_dev2dev__svcline() {
    local svc=$1
    echo -n "svc $svc "
    r2r_dev2dev__svc2name $svc
}

r2r_dev2dev__svc2name() {
    local svc=$1
    if [[ $svc == "420" ]]; then
        echo "review_request"
    elif [[ $svc == "423" ]]; then
        echo "merged"
    elif [[ $svc == "427" ]]; then
        echo "merge_request"
    elif [[ $svc == "430" ]]; then
        echo "release"
    else
        echo "unknown"
    fi
}

r2r_dev2dev__name2svc() {
    svc_name=$1
    if [[ $svc_name == "review_request" ]]; then
        echo "420"
    elif [[ $svc_name == "merged" ]]; then
        echo "423"
    elif [[ $svc_name == "merge_request" ]]; then
        echo "427"
    elif [[ $svc_name == "release" ]]; then
        echo "430"
    else
        echo "-1"
    fi
}

r2r_dev2dev__help_svc_review_request__help() {
    cat << EOF
##############################################################
## dev protocol - review_request
##############################################################
Help:
    Call review_request to ask for a peer review of your branch.
    You are happy with the quality but you want peers to agree with you, as many as possible.

Args:
0.- rr-id
1.- branch 
    the branch your calling for review
2.- showcase / reproduce instructions.
    Explanation, links, Paths, instructions, steps
3.- Link(s) to ticket(s)

Reminders:

Mergers:
    Once posted you would expect a merger studying your change, his goal is to integrate your changes in the product.
    Mergers are strict with the quality, they are producing a quality product after all.
    They are likely going to find issues.
    These issues are ideally resolved producing a change in the submission (pushing again to resume the review).
    Unnecesary discussions challenging the merger authority shall be avoided. Merger always wins, is a rule of the game. 
    Based on their knowledge, they are, in essence, free to accept or reject your changes.

Quality:
    Easy to spot/Easy to prevent issues are:
    * algorithms without associated tests
    * clean code. self-documented readable code. Minimum/Nil use of commented lines, code indentation, misalignments

##############################################################

EOF
}

r2r_dev2dev__dev__hdr() {
    local from=$1
    local svc_name=$2
    local ts="$(date +%s)"
    echo "r2r dev2dev" 
    echo "role dev"
    echo "src ${from}"
    echo "ts ${ts}"
    r2r_dev2dev__svcline $(r2r_dev2dev__name2svc $svc_name)
}


