#!/bin/bash
####################################
## The following functions will be embedded in both the installer and uninstaller scripts, and execute on target
## include this way in <your_subsystem>/lib/mk_target.env:
## function libpostgres__libfn {
## 	cat << EOF
## # postgres =# ${ssn}
## libfn_postgres__version=${libpostgres__version}
## libfn_postgres__cluster=${libpostgres__cluster}
## libfn_postgres__port=${libpostgres__listen_port}
## libfn_postgres__db_name="${libpostgres__db_name}"
## libfn_postgres__vardir="${libpostgres__vardir}"
## libfn_postgres__role="${libpostgres__role}"
## libfn_postgres__passphrase="${libpostgres__passphrase}"
## EOF
## 	cat ${system_home}/lib/target_run/libfn_pgsql.env | grep -v "^#"
## }
####################################
xpsql() {
    local cmd="$@"
    local su_cmd="psql --host /var/run/postgresql -p ${libfn_postgres__port} -d ${libfn_postgres__db_name} -c \"$cmd\""
    pushd /var/lib/postgresql > /dev/null
        su -c "${su_cmd}" postgres
    popd > /dev/null
}

xpsqlf() {
    local sql_file=$1
    local su_cmd="psql -v ON_ERROR_STOP=1 --host /var/run/postgresql -p ${libfn_postgres__port} -d ${libfn_postgres__db_name} -f ${sql_file}"
    echo "su -c \"${su_cmd}\" postgres | tee /tmp/sqlapplylog"
    pushd /tmp > /dev/null
        $(su -c "${su_cmd}" postgres > /tmp/sqlapplylog)
    popd > /dev/null
    cat /tmp/sqlapplylog | grep "^ERROR:" > /dev/null
    if [[ $? -eq 0 ]]; then
        >&2 tail /tmp/sqlapplylog
        >&2 echo "KO 44039 Errors applying sql_file"
        rm /tmp/sqlapplylog
        exit 1
    else
        local nl=$(cat /tmp/sqlapplylog | wc -l | tr -d ' ')
        if [[ $nl -gt 20 ]]; then
            head -n 10 /tmp/sqlapplylog
            echo "[...]"
            tail -n 10 /tmp/sqlapplylog
        else
            cat /tmp/sqlapplylog
        fi
    fi
    rm /tmp/sqlapplylog
}

ensure_db() {
#    local secrets_env_file=$1
#    echo "PG STEP 0"

    echo "Custers:"
    pg_lsclusters
    echo
    echo "ls cluster ${libfn_postgres__cluster}"
    pg_lsclusters | grep "${libfn_postgres__cluster}"
    local r=$?
    if [[ $r -ne 0 ]]; then
        echo "${libfn_postgres__cluster} cluster doesn't exist"
        pg_createcluster -p ${libfn_postgres__port} ${libfn_postgres__version} ${libfn_postgres__cluster}
        if [[ $? -ne 0 ]]; then
            >&2 echo "KO 78569 create cluster"
            exit 1
        fi
    else
        echo "found cluster ${libfn_postgres__cluster}"
    fi
#    echo "PG STEP 1"
    local status=$(pg_lsclusters | grep ${libfn_postgres__cluster} | awk '{ print $4 }')
    echo "cluster ${libfn_postgres__cluster} status: ${status}"
    if [[ "_${status}" != "_online" ]]; then
        echo "starting cluster ${libfn_postgres__cluster}"
        pg_ctlcluster ${libfn_postgres__version} ${libfn_postgres__cluster} start
        status=$(pg_lsclusters | grep ${libfn_postgres__cluster} | awk '{ print $4 }')
        echo "cluster ${libfn_postgres__cluster} status: ${status}"
        if [[ "_${status}" != "_online" ]]; then
            echo "troubleshooting.."
            chown root:ssl-cert /etc/ssl/private/ssl-cert-snakeoil.key
            chmod 0640 /etc/ssl/private/ssl-cert-snakeoil.key
            echo "starting cluster again"
            pg_ctlcluster ${libfn_postgres__version} ${libfn_postgres__cluster} start
            local status=$(pg_lsclusters | grep ${libfn_postgres__cluster} | awk '{ print $4 }')
            echo "cluster ${libfn_postgres__cluster} status: ${status}"
            if [[ "_${status}" != "_online" ]]; then
                >&2 echo "KO 72910 Could not start cluster ${libfn_postgres__cluster}"
                exit 1
            fi
        fi
    fi
#    echo "PG STEP 2"
    pushd /tmp > /dev/null
#        login="root"
#        password='jw8s0F4'
##echo "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX login:{$login} password:{$password} XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
#        if [[ -f ${secrets_env_file} ]]; then
#            echo "load secrets from ${secrets_env_file}"
#            . ${secrets_env_file} #override login and password
#        fi
##echo "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX login:{$login} password:{$password} XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
        #echo "${libfn_postgres__port} ${libfn_postgres__role} ${libfn_postgres__passphrase}"
        su -c "psql --host /var/run/postgresql -p ${libfn_postgres__port} -q -c \"create role ${libfn_postgres__role} WITH login PASSWORD '${libfn_postgres__passphrase}';\"" postgres
        output=$(2>&1 su -c "psql --host /var/run/postgresql -p ${libfn_postgres__port} -d ${libfn_postgres__db_name} -c \"\\d\"" postgres)
        echo ${output} | grep "FATAL" > /dev/null
        if [[ $? -eq 0 ]]; then
            echo "PG STEP 3"
            echo "database does not exist. Creating database ${libfn_postgres__db_name}"
            output=$(2>&1 su -c "psql --host /var/run/postgresql -p ${libfn_postgres__port} -c \"create database ${libfn_postgres__db_name};\"" postgres)
            echo "output: ${output}"
            if [[ "_${output}" != "_CREATE DATABASE" ]]; then
                >&2 echo "KO 72911 Could not create database ${libfn_postgres__db_name} in cluster ${libfn_postgres__cluster}"
                exit 1
            fi
        else
            echo "output: ${output}"
            echo "database ${libfn_postgres__db_name} in cluster ${libfn_postgres__cluster} already exist."
        fi
        cat << EOF > /tmp/exec332
CREATE GROUP staff with user ${libfn_postgres__role};
GRANT pg_read_all_data TO staff;
REVOKE ALL ON DATABASE ${libfn_postgres__db_name} FROM public;
GRANT CONNECT ON DATABASE ${libfn_postgres__db_name} TO staff;
GRANT USAGE ON SCHEMA public TO staff;
EOF
        xpsqlf /tmp/exec332
        echo "executed:"
        cat /tmp/exec332
        rm /tmp/exec332
    popd > /dev/null
#    login=""    ##clear this memory
#    password="" ##clear this memory
#    echo "PG END STEPS"
}

update_db() {
    local sqldir=$1  #    /tmp/db
    local sqlfile=$2  #    schema
    echo -n "update_db with $sqlfile"
    mkdir -p ${libfn_postgres__vardir}
    let nextv=0
    if [[ -f ${libfn_postgres__vardir}/${sqlfile}__nextv ]]; then
        let nextv=$(cat ${libfn_postgres__vardir}/${sqlfile}__nextv | xargs)
    fi
    while [[ true ]]; do
        file="${sqldir}/${sqlfile}_${nextv}.sql"
        if [[ ! -f ${file} ]]; then
            file="${sqldir}/${sqlfile}_${nextv}.sql.gz"
            if [[ ! -f ${file} ]]; then
                echo "OK. since ${sqldir}/${sqlfile}_${nextv} doesn't exist there's no more files to apply."
                break
            else
                gunzip ${file}
                file="${sqldir}/${sqlfile}_${nextv}.sql"
            fi
        fi
        echo -n "Applying file "
        ls -la ${file}
        xpsqlf ${file}      
        if [[ $? -eq 0 ]]; then
            let "nextv++"
            echo ${nextv} > ${libfn_postgres__vardir}/${sqlfile}__nextv
        else
            >&2 echo "KO 72211 Could not load database ${libfn_postgres__db_name} in cluster ${libfn_postgres__cluster} from file ${file}"
            exit 1
        fi
    done
}

