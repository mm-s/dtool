#!/bin/bash

#jail must be defined
#runuser must be defined

check_starving() {
    free_space=$(df -Pm / | tail -1 | awk '{print $4}')
    if [ "$free_space" -lt 256 ]; then
        return 1
    else
        return 0
    fi
}

fetch_dir() {
    local destjail=$1
    local dir=$2
    echo "save state dir ${dir} -> ${destjail}${dir}"
    mkdir -p ${destjail}${dir}
    rm -rf ${destjail}${dir}
    mkdir -p ${dir}
    mv ${dir} ${destjail}/${dir}
}

fetch_file() {
    local destjail=$1
    local file=$2
    fdir=$(dirname ${file})
    mkdir -p ${fdir}
    mkdir -p ${destjail}${fdir}
    rm -f ${destjail}${file}
    if [[ -f ${file} ]]; then
        mv ${file} ${destjail}${fdir}/
    fi
}

push_dir() {
    local srcjail=$1
    local dir=$2
    local u=$3
    local g=$4
    rm -rf ${dir}
    mkdir -p $(dirname ${dir})
    mkdir -p ${srcjail}${dir}
    mv ${srcjail}${dir} $(dirname ${dir})/
    chown -R $u:$g $dir 
}

push_file() {
    local srcjail=$1
    local file=$2
    local u=$3
    local g=$4
    mkdir -p ${srcjail}$(dirname ${file})
    mkdir -p $(dirname ${file})
    if [[ -f ${srcjail}${file} ]]; then
        mv ${srcjail}${file} $(dirname ${file})/
    fi
    chown $u:$g $file
}

libfn_update__take_state() {
    local instance=$1
    local thedir276=$2
    mkdir -p $thedir276
    . /etc/script_tv/be/L1/script4/${instance}/env
    dir=$thedir276
    mv ${gov__configdir}/db ${dir}/
    mv ${gov__configdir}/snapshot ${dir}/
    . /etc/script_tv/db/explorer/${instance}/env
    dir=$thedir276
    mkdir -p ${dir}/mongodb
    mv $libmongod__path/* ${dir}/mongodb/
}

libfn_update__new_state() {
    local instance=$1
    local thedir276=$2
    if [[ ! -f /etc/script_tv/be/L1/script4/${instance}/env ]]; then
        >&2 echo "KO 76022 file not found /etc/script_tv/be/L1/script4/${instance}/env"
        exit 1
    fi
    if [[ ! -f /etc/script_tv/db/explorer/${instance}/env ]]; then
        >&2 echo "KO 76023 file not found /etc/script_tv/db/explorer/${instance}/env"
        exit 1
    fi
    . /etc/script_tv/be/L1/script4/${instance}/env
    dir=$thedir276
    rm -rf ${gov__configdir}/db
    mv ${dir}/db ${gov__configdir}/
    rm -f ${gov__configdir}/snapshot
    mv ${dir}/snapshot ${gov__configdir}/
    chown stv:stv ${gov__configdir}/db -R
    chown stv:stv ${gov__configdir}/snapshot
    . /etc/script_tv/db/explorer/${instance}/env
    dir=$thedir276
    mkdir -p ${dir}/mongodb
    rm -rf $libmongod__path/*
    mv ${dir}/mongodb/* $libmongod__path/
    chown mongodb:mongodb $libmongod__path/* -R
}

libfn_update__restore_blockchain_state() {
    local tgz=$1
    if [[ -z "$tgz" ]]; then
        >&2 echo "KO 66987 tgz file expected"
        exit 1
    fi
    let num_L1=$(find  /etc/script_tv/be/L1/script4 -name "env" | wc -l)
    if [[ $num_L1 -gt 1 ]]; then
        >&2 echo "KO 44093 Only implemented for single-node installations."
        exit 1
    fi
    . $(find  /etc/script_tv/be/L1/script4 -name "env")
    local tgt_path=$(find  /etc/script_tv/be/L1/script4 -name "env" | sed 's~/etc/script_tv/be/L1/script4/~~' | sed 's~/env$~~')
    rm work -rf
    mkdir work
    pushd work > /dev/null
        tar xzf ../$tgz
        newstate=$(ls -1)
        script_tv__ctl.sh stop
        libfn_update__new_state "${tgt_path}" "${newstate}"
        script_tv__ctl.sh start
    popd > /dev/null
    rm work -rf
}

libfn_update__save_blockchain_state() {
    let num_L1=$(find  /etc/script_tv/be/L1/script4 -name "env" | wc -l)
    if [[ $num_L1 -gt 1 ]]; then
        >&2 echo "KO 44093 Only implemented for single-node installations."
        exit 1
    fi
    . $(find  /etc/script_tv/be/L1/script4 -name "env")
    systemctl status ${gov__svcname}.service  | grep "Active: active (running) " > /dev/null
    if [[ $? -ne 0 ]]; then
        >&2 echo "KO 33020 Service ${gov__svcname} must be running."
        exit 1
    fi
    local response=$(curl -s -X POST ${gov__api_URL__local} -H "Content-Type: application/json" -d '{"jsonrpc":"2.0","method":"script.GetStatus","params":{}, "id":"1"}')
    local snapshot_block_height=$(echo "$response" | jq -r '.result.snapshot_block_height')
    local latest_finalized_block_height=$(echo "$response" | jq -r '.result.latest_finalized_block_height')
    local syncing=$(echo "$response" | jq -r '.result.syncing')
    cat << EOF
snapshot_block_height=${snapshot_block_height}
latest_finalized_block_height=${latest_finalized_block_height}
syncing=${syncing}

EOF
    if [[ "_${syncing}" != "_false" ]]; then
        >&2 echo "KO 33021 Cannot save state while syncing."
        exit 1
    fi
    script_tv__ctl.sh stop
    local ts=$(date +"%y%m%d%H%M%S")
    local hostname=$(hostname)
    local thedir276=${hostname}__blockchain_state__${ts}__${snapshot_block_height}__${latest_finalized_block_height}
    mkdir -p $thedir276
    for f in $(find /etc/script_tv/be/L1/script4 -type f -name "env"); do
        . $f
        break
    done
    local dir=$thedir276
    cp -R ${gov__configdir}/db ${dir}/
    cp -R ${gov__configdir}/snapshot ${dir}/
    for f in $(find /etc/script_tv/db/explorer -type f -name "env"); do
        . $f
        break
    done
    local dir=$thedir276
    mkdir -p ${dir}/mongodb
    cp -R $libmongod__path/* ${dir}/mongodb/
    script_tv__ctl.sh start
    echo $dir
    echo "compressing..."
    tar -czf ${dir}.tgz ${dir}
    if [[ $? -ne 0 ]]; then
        >&2 echo "KO 67717 Could not create tgz file from dir ${dir}"
        exit 1
    fi
    rm -rf ${dir}
    ls -la ${dir}.tgz
}

fs_entries() {
    if [[ -f /var/${system_unix_name}/hot_upgrade__info ]]; then
        cat /var/${system_unix_name}/hot_upgrade__info
    fi
    if [[ ! -f /etc/script_tv__pinned ]]; then
        touch /etc/script_tv__pinned
    fi
    cat /etc/script_tv__pinned
}

libfn_update__node_state__info() {
    fs_entries | sort | uniq
}

libfn_update__move_node_state() {
    local statejail=$1
    if [[ -z "${statejail}" ]]; then
        statejail="/root/script_tv__temp_state"
    fi
    if [[ -d "${statejail}" ]]; then
        >&2 echo "KO 54099 destination dir ${statejail} already exists."
        exit 1
    fi
    mkdir -p ${statejail}
    echo "stopping node"
    ${system_unix_name}__ctl.sh stop
    fs_entries | sort | uniq > ${statejail}/fs_entries
    cat ${statejail}/fs_entries | while read -r line; do
        echo "->- * line: $line"
        local type=$(echo "$line" | awk '{ print $1 }')
        local fsnode=$(echo "$line" | awk '{ print $2 }')
        if [[ "_${type}" == "_d" ]]; then
            echo "save dir ${statejail}${fsnode}"
            fetch_dir ${statejail} ${fsnode}
        else
            echo "save file ${statejail}${fsnode}"
            fetch_file ${statejail} ${fsnode}
        fi
    done
}

patch_fs_entries__restart_testnet() {
    local fs_entries_file=$1
    echo "patch_fs_entries__restart_testnet"
    if [[ -f /etc/script_tv/be/L1/script4/testnet/user/env ]]; then
        echo "testnet/user"
        . /etc/script_tv/be/L1/script4/testnet/user/env
        . /etc/script_tv/db/explorer/testnet/user/env
        cp ${fs_entries_file} /tmp/xx77870
        cp /tmp/xx77870 /tmp/xx77870__verify
        echo "/tmp/xx77870__verify"
    elif [[ -f /etc/script_tv/be/L1/script4/testnet/user1/env ]]; then
        echo "testnet/user1"
        . /etc/script_tv/be/L1/script4/testnet/user1/env
        . /etc/script_tv/db/explorer/testnet/user1/env
        cp ${fs_entries_file} /tmp/xx77870
        cp /tmp/xx77870 /tmp/xx77870__verify
        echo "/tmp/xx77870__verify"
    elif [[ -f /etc/script_tv/be/L1/script4/testnet/genesis/env ]]; then
        echo "testnet/genesis"
        . /etc/script_tv/be/L1/script4/testnet/genesis/env
        . /etc/script_tv/db/explorer/testnet/genesis/env
        . /etc/script_tv/be/b2c/testnet/genesis/env
        cp ${fs_entries_file} /tmp/xx77870
        cp /tmp/xx77870 /tmp/xx77870__verify
        echo "/tmp/xx77870__verify"
        cat /tmp/xx77870 | grep -v "${crawler_dir}" > /tmp/xx77871              # be/b2c/testnet/genesis/env
        cat /tmp/xx77871 | grep -v "${license_dir}" > /tmp/xx77870
        cat /tmp/xx77870 | grep -v "${redeem_dir}" > /tmp/xx77871
        cat /tmp/xx77871 | grep -v "${spent_db_dir}" > /tmp/xx77870
    else
        echo "no patch"
        return
    fi

    cat /tmp/xx77870 | grep -v "${gov__dbdir}" > /tmp/xx77871
    cat /tmp/xx77871 | grep -v "${gov__snapshot_file}" > /tmp/xx77870       # be/L1/script4/testnet/genesis/env
    cat /tmp/xx77870 | grep -v "${gov__config_file}" > /tmp/xx77871         
    cat /tmp/xx77871 | grep -v "${libmongod__path}" > /tmp/xx77870          # db/explorer/testnet/genesis/env

    cp /tmp/xx77870 /tmp/xx77871__verify
    echo "/tmp/xx77871__verify"
    cat /tmp/xx77870 > ${fs_entries_file}
    rm -f /tmp/xx77870
    rm -f /tmp/xx77871
}

libfn_update__restore_node_state() {
    statejail=$1
    if [[ -z "${statejail}" ]]; then
        statejail="/root/script_tv__temp_state"
    fi
    if [[ ! -d "${statejail}" ]]; then
        >&2 echo "KO 54096 destination dir ${statejail} doesn't exists."
        exit 1
    fi
    if [[ ! -f "${statejail}/fs_entries" ]]; then
        >&2 echo "KO 54097 ${statejail}/fs_entries not found."
        exit 1
    fi
    #patch_fs_entries__restart_testnet ${statejail}/fs_entries
    echo "Restoring items:"
    cat ${statejail}/fs_entries | sort | uniq | nl
    echo
    cat ${statejail}/fs_entries | sort | uniq | while read -r line; do
        echo "->- * line: $line"
        local type=$(echo "$line" | awk '{ print $1 }')
        local fsnode=$(echo "$line" | awk '{ print $2 }')
        local chownu=$(echo "$line" | awk '{ print $3 }')
        local chowng=$(echo "$line" | awk '{ print $4 }')
        #echo "type: $type fsnode $fsnode chownu $chownu chowng $chowng"
        if [[ "_${type}" == "_d" ]]; then
            echo "restore dir ${statejail}${fsnode} ${chownu} ${chowng}"
            push_dir ${statejail} ${fsnode} ${chownu} ${chowng}
        else
            echo "restore file ${statejail}${fsnode} ${chownu} ${chowng}"
            push_file ${statejail} ${fsnode} ${chownu} ${chowng}
        fi
    done
    rm -rf ${statejail}
}

updates__log() {
    local line=$1
    local ts=$(date +%s)
    local tsiso=$(date --date="@${ts}" --iso-8601=seconds)
    mkdir -p /var/log
    echo "$ts $tsiso update $line" >> /var/log/updates__script_tv
}

let verbose=0

libfn_update__wait_sync__env() {
    local env=$1
    if [[ ${verbose} -eq 1 ]]; then
        echo "Sourcing: $env"
    fi
    . $env
    if [[ ${verbose} -eq 1 ]]; then
        echo "systemd gov daemon: systemctl status ${gov__svcname}.service"
    fi
    systemctl status ${gov__svcname}.service  | grep "Active: active (running) " > /dev/null
    if [[ $? -ne 0 ]]; then
        echo "Waiting for L1... (${script4_tgt_path})"
        return 1
    fi
    if [[ ${verbose} -eq 1 ]]; then
        echo "status reported by gov daemon: $curl -S -X POST ${gov__api_URL__local} -H \"Content-Type: application/json\" -d '{\"jsonrpc\":\"2.0\",\"method\":\"script.GetStatus\",\"params\":{}, \"id\":\"1\"}'"
    fi
    response=$(timeout 3 $curl -S -X POST ${gov__api_URL__local} -H "Content-Type: application/json" -d '{"jsonrpc":"2.0","method":"script.GetStatus","params":{}, "id":"1"}' 2>errors.log)
    if [[ $? -ne 0 ]]; then
        >&2 cat errors.log
        rm -f errors.log
        >&2 echo "L1 not ready yet (${script4_tgt_path})..."
        return 1
    fi
    rm -f errors.log
    if [[ -z "$response" ]]; then
        >&2 echo "L1 not ready yet..."
        return 1
    fi
    if [[ ${verbose} -eq 1 ]]; then
        echo "response: "
        echo $response | jq
        echo
    fi
    local syncing=$(echo "$response" | jq -r '.result.syncing')
    if [[ "_${syncing}" == "_false" ]]; then
        echo "in sync now!."
        return 0
    fi
    local snapshot_block_height=$(echo "$response" | jq -r '.result.snapshot_block_height')
    local latest_finalized_block_height=$(echo "$response" | jq -r '.result.latest_finalized_block_height')
    local current_height=$(echo "$response" | jq -r '.result.current_height')
    local cd=$(echo $current_height-$latest_finalized_block_height | bc)
    echo "syncing: $latest_finalized_block_height / $current_height - countdown: $cd"
    return 1
}

libfn_update__wait_sync() {
    let ret=0
    for gov_env in $(find /etc/script_tv/be/L1/script4 -name "env"); do
        libfn_update__wait_sync__env ${gov_env}
        if [[ $? -ne 0 ]]; then
            let ret=1
        fi
    done
    return $ret
}

libfn_update__waitsync_loop() {
    if [[ "$1" == "1" ]]; then
        let verbose=1
    fi
    curl="curl -s -k"
    let n=0
    while true; do
        let n=$n+1
        if [[ $n -gt 20 ]]; then
            let verbose=1
        fi
        libfn_update__wait_sync
        if [[ $? -eq 0 ]]; then
            break
        else
            echo "checking again in 10 seconds..."
            sleep 10
        fi
    done
}

update_entry_point() {
    local silent__on__no_updates
    let silent__on__no_updates=$1
    local timeout_sec=3600 #libfn_user.env:generate_crontab
    # User root?
    if [[ -f /tmp/update_entry_point.pid ]]; then
        local pid=$(cat /tmp/update_entry_point.pid | awk '{ print $1 }')
        local t0=$(cat /tmp/update_entry_point.pid | awk '{ print $2 }')
        local t1=$(date +%s)
        local age=$((t1 - t0))
        if [ "$age" -lt "${timeout_sec}" ]; then 
            psreported=$(cat /tmp/update_entry_point.pid)
            psrunning=$(ps ax | grep "${psreported} " | grep -v grep | awk '{ print $1 }')
            if [[ ! -z "$psrunning" ]]; then
                >&2 echo "KO 76021 System update ongoing for ${age} secs. Wait until process ${psreported} ends, or outrageously delete the file /tmp/update_entry_point.pid"
                return;
            else
                >&2 echo "WA 30290 Process ${psreported} doesn't exist anymore"
            fi
        else
            >&2 echo "WA 30291 process $pid is active for more than 1 hour. ignoring the pid file."
        fi
        #"Age is greater than 1 hour."
        rm -f /tmp/update_entry_point.pid
    fi
    echo "$$ $(date +%s)" > /tmp/update_entry_point.pid
    chown stv:stv /tmp/update_entry_point.pid
    . /etc/${system_unix_name}/system.env
    local msg="current monotonic_version $monotonic_version"
    updates__log "* start $msg"
    if ! check_starving; then
        msg="KO 95863 Disk space is low."
        updates__log "end $msg"
        >&2 echo $msg
        rm -f /tmp/update_entry_point.pid
        exit 1
    fi
    . /etc/${system_unix_name}/distributor.env
    ${distributor__wget} -q -O /tmp/upstream_monotonic_version.txt ${distributor__URL}/monotonic_version.txt
    if [[ $? -ne 0 ]]; then
        msg="KO 50493 upstream monotonic_version not reachable at ${distributor__URL}/monotonic_version.txt"
        updates__log "end ${msg}"
        >&2 echo ${msg}
        rm -f /tmp/update_entry_point.pid
        exit 1
    fi
    upstream_monotonic_version=$(cat /tmp/upstream_monotonic_version.txt)
    rm -f /tmp/upstream_monotonic_version.txt
    if [[ ${upstream_monotonic_version} -gt ${monotonic_version} ]]; then
        echo "Installing updates..."
    else
        if [[ ${silent__on__no_updates} -eq 0 ]]; then
            echo "No updates available."
        fi
        updates__log "end OK No updates available"
        rm -f /tmp/update_entry_point.pid
        exit 0
    fi
    wget_installer="${distributor__wget_installer}"
    if [[ -z "${wget_installer}" ]]; then
        msg="KO 76093 wget_installer is empty"
        updates__log "end ${msg}"
        >&2 echo $msg
        rm -f /tmp/update_entry_point.pid
        exit 1
    fi
    echo "working on /root"
    cd /root
    echo "wget_installer $wget_installer"
    eval "$wget_installer"
    if [[ $? -ne 0 ]]; then
        msg="KO 59554 downloading installer. ${wget_installer}"
        updates__log "end ${msg}"
        >&2 echo $msg
        rm -f /tmp/update_entry_point.pid
        exit 1
    fi
    echo "got install.sh"
    echo "exec ./install.sh -only-download"
    local dir=$(./install.sh -only-download | tail -n1)
    if [[ $? -ne 0 ]]; then
        msg="KO 59555 downloading and uncompressing package."
        updates__log "end ${msg}"
        >&2 echo $msg
        rm -f /tmp/update_entry_point.pid
        exit 1
    fi
    echo "package ready at $dir"
    echo "node_update_step.sh"
    updates__log "node_update_step"
    cd ${dir} > /dev/null
    exec ./node_update.sh
}

