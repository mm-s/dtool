#!/bin/bash

prefix="$(realpath "$(dirname "${BASH_SOURCE[0]}")/..")"
libdir=${prefix}/lib/dtool

#echo "libdir======================${libdir}"

libconfigure__stcfg__sets() {
   echo "flags"
}

libconfigure__stcfg__version() {  # <key>  <default value>
    echo "16"
}

libconfigure__stcfg__on_new_version() {
    local fromversion=$1
    if [[ "_${fromversion}" == "_15" ]]; then
        stcfg__set_value dev_handle ${hot_handle}
    fi
}

libconfigure__stcfg__flags__vars() {  # <key>  <default value>
    cat << EOF
dev_handle              XX
build_mode              debug
secrets_root            _secrets
ci_output_dir           cilogs
verbose_build           0
build__target_OS        debian_12_stable
EOF
}

print_stack() {
   local i message="${1:-""}"
   local stack_size=${#FUNCNAME[@]}
   for (( i=1; i<$stack_size; i++ )); do
      local func="${FUNCNAME[$i]}"
      [[ x$func = x ]] && func=MAIN
      local linen="${BASH_LINENO[$(( i - 1 ))]}"
      local src="${BASH_SOURCE[$i]}"
      [[ x"$src" = x ]] && src=non_file_source

      echo $"at: "$func" "$src" "$linen
   done
}

require_root_pwd() { 
#    if [[ "_${system_home}" != "_$(pwd)" ]]; then
#        >&2 print_stack
#        >&2 echo "KO 73822 Function shall be called from ${system_home}"
#        exit 1
#    fi
:
}

check_ss_env() {
    require_root_pwd
    if [[ ! -f cfg_ss.env ]]; then
        >&2 echo "KO 22619 subsystems are not configured. Run bin/configure reconfigure"
        exit 1
    fi
}

conf_hash_content() {
    require_root_pwd
    echo "salt123"
    cat cfg/system.env
    cat cfg_ss.env
}

conf_hash() {
    conf_hash_content | shasum -a 256 | awk '{ print $1 }'
}

last_load_env_ss=""
last_load_env_hosts=""

liburl__reset() {
:
}

reset_ss_() {
    require_root_pwd
    last_load_env_ss=""
    . ${libdir}/mk_target__template
    liburl__reset
    ss_port_ordinal=1
}

reset_hosts() {
    system_DNS__domain=""
    system_DNS__subdomain=""
    DNS_method="bind"
    fetch_home=""
}

resolv_file__prefix="/tmp/resolve__"

resolv_file() {
    local ss=$1
    local network=$2
    local instance=$3
    echo "${resolv_file__prefix}$(tovar ${ss})__${network}__${instance}"
}

load_env_ss_() {
    local ss=$1
    require_root_pwd
    reset_ss_
    if [[ "_${ss}" == "_" ]]; then
        return
    fi
    if [[ ! -f ${ss}/lib/mk_target.env ]]; then
        >&2 print_stack
        >&2 echo "pwd=$(pwd)"
        >&2 echo "KO 60593  load_env_ss_: ${ss}/lib/mk_target.env not found."
        exit 1
    fi
    on_ss__push
    last_load_env_ss=${ss}
    pushd ${ss} > /dev/null
        . lib/mk_target.env
        mk_target__constructor
        ss_name=${ss}
        ssn=$(ssn ${ss})
        ss_secrets__root=${secrets_root}/${ssn}
        local xss_file=$(resolv_file ${ss} ${ss_network} ${ss_instance})
        if [[ -f ${xss_file} ]]; then
            . ${xss_file}
        fi
        mk_target__check_instance
        mk_target__set_vars #> /dev/null
    popd > /dev/null

}

make_vm_a_known_host() {
    local vm=$1
    libvmpool__vm_as ${vm} m0
    touch ~/.ssh/known_hosts
    cat ~/.ssh/known_hosts | grep "^${m0__server_name} " > /dev/null
    if [[ $? -ne 0 ]]; then
        ssh-keyscan ${m0__server_name} >> ~/.ssh/known_hosts
        if [[ $? -ne 0 ]]; then
            >&2 echo "KO 84592"
            exit 1
        fi
    fi
}

load_env_hosts() {
    local file=$1
    if [[ "_${file}" == "_" ]]; then
        reset_hosts
        last_load_env_hosts=""
        return
    fi
    if [[ ! -f ${file} ]]; then
        >&2 echo "KO 50593 ${file} not found."
        exit 1
    fi
    reset_hosts
    . ${file}
    last_load_env_hosts=${file}
}

ss_conf__stack_dump() {
    cat /tmp/cfg_ss__stack
}

on_ss__push() {
:    #overriden by bin/build.sh
}

ss__push() {
    ss=$1
    ss_network=$2
    ss_instance=$3
    m=$4
    ssn=$(ssn ${ss})
    ss_secrets__root=${secrets_root}/${ssn}
    ss_tgt_path=$(ss_tgt_path__compute)
    if [[ "_${ss_tgt_path}" == "_" ]]; then
        >&2 echo
        >&2 print_stack
        >&2 echo "KO 22019 "
        exit 1
    fi
    echo "${last_load_env_ss}" >> /tmp/cfg_ss__stack
    load_env_ss_ "${ss}"
    pushd ${ss} > /dev/null 
}

ss__pop() {
    popd > /dev/null
    if [[ ! -f /tmp/cfg_ss__stack ]]; then
        >&2 print_stack
        >&2 echo "KO 77930 /tmp/cfg_ss__stack not found"
        exit 1
    fi
    load_env_ss_ "$(cat /tmp/cfg_ss__stack | tail -n1)"
    sedi '$d' /tmp/cfg_ss__stack
    if [[ $? -ne 0 ]]; then
        >&2 echo "KO 77931"
        exit 1
    fi
    ss_network=""
    ss_instance=""
    ssn=""
    ss_secrets__root=""
}

hosts_conf__stack_dump() {
    cat /tmp/cfg_hosts__stack 
}

hosts_conf__push() {
    local file=$1
    echo "${last_load_env_hosts}" >> /tmp/cfg_hosts__stack
    load_env_hosts "${file}"
}

hosts_conf__pop() {
    local n=$(cat /tmp/cfg_hosts__stack | wc -l | tr -d ' ')
    if [[ $n -eq 0 ]]; then
        >&2 echo "KO 50497 hosts_conf__pop "
        exit 1
    fi
    load_env_hosts "$(cat /tmp/cfg_hosts__stack | tail -n1)"
    sed '$d'  /tmp/cfg_hosts__stack > /tmp/cfg_hosts__stack2
    mv /tmp/cfg_hosts__stack2 /tmp/cfg_hosts__stack
}

tovar() {
    local ssi=$1
    echo $ssi | sed 's~/~__~g' 
}

reset_cfg_ss() {
    deployment_home=""
    fetch_home=""
}

source_cfg_ss() {
    rm -f /tmp/ssi
    reset_cfg_ss
    . cfg/system.env
    . cfg_ss.env
    subsystems=$(cat /tmp/ssi | awk '{ print $1 }' | sort | uniq)
}

source_env() {
    require_root_pwd
    check_ss_env
    . cfg/system.env
    source_cfg_ss
}

list_all_ss0() {
    local d=$1
#    find $d -mindepth 3  -maxdepth 5 -type f -name mk_target.env | grep '/lib/mk_target.env$' | sed 's#^\.*/\(.*\)/lib/mk_target.env#\1#' | sed 's#^\./\(.*\)#\1#'
    find $d -mindepth 3 -maxdepth 5 -type f -name mk_target.env | grep '/lib/mk_target.env$' | sed 's#^\(.*\)/lib/mk_target.env#\1#'
}

list_all_ss() {
    list_all_ss0 os
    list_all_ss0 db
    list_all_ss0 be
    list_all_ss0 fe
}

list_ss0() {
    local d=$1
#    find $d -mindepth 3  -maxdepth 5 -type f -name mk_target.env | grep '/lib/mk_target.env$' | sed 's#^\.*/\(.*\)/lib/mk_target.env#\1#' | sed 's#^\./\(.*\)#\1#'
    find $d -mindepth 3  -maxdepth 5 -type f -name mk_target.env | grep '/lib/mk_target.env$' | sed 's#^\(.*\)/lib/mk_target.env#\1#'
}

list_ss() {
    list_ss0 os
    list_ss0 db
    list_ss0 be
    list_ss0 fe
}

list_ss__view0() {
    for f in $(list_ss); do
        echo "$(basename $f) $(dirname $f)"
    done
}

list_ss__view1() {
    for f in $(list_ss); do
        echo "$(dirname $f) $(basename $f)"
    done
}

list_ss__view() {
    require_root_pwd
    echo "By OS_component:"
    list_ss__view1 | sort | ${nl}
    echo
    echo "By functional_subsystem:"
    list_ss__view0 | sort | ${nl}
}

check_method__() {
    local m=$1
    >&2 echo "KO 81723 deployment method for machine $m not defined. Have you picked the right cfg/hosts file in bin/configure reconfigure?"
    exit 1
}

check_method__distr() {
: #    echo "method distr"
}

check_method__local() {
: #    echo "method local"
}

check_method__ssh() {
    m=$1
    var=${m}__user
    user=${!var}
    var=${m}__ip
    ip=${!var}
    var=${m}__sshport
    sshport=${!var}
    cat << EOF
    machine: $m
        deployment method: ssh
        details: ${user}@${ip} port ${sshport}
EOF
    if [[ "_${user}" == "_" ]]; then
        >&2 echo "KO 11029 usernot defined"
        exit 1
    fi
    if [[ "_${ip}" == "_" ]]; then
        >&2 echo "KO 11030 ip defined"
        exit 1
    fi
    if [[ "_${sshport}" == "_" ]]; then
        >&2 echo "KO 11031 sshport defined"
        exit 1
    fi
}

check_method__rsync() {
    local m=$1
    local var=${m}__vm
    local vm=${!var}
    echo "check_method__rsync m=${m} vm=${vm}"
    libvmpool__vm_as ${vm} m0
    local user=${m0__user}
    local ip=${m0__ip}
    local sshport=${m0__sshport}
    cat << EOF
    machine: $m
        deployment method: rsync
        details: root@${ip} port ${sshport}
EOF
    if [[ "_${ip}" == "_" ]]; then
        >&2 echo "KO 11230 ip not defined"
        exit 1
    fi
    if [[ "_${sshport}" == "_" ]]; then
        >&2 echo "KO 11231 sshport not defined"
        exit 1
    fi
}

check_ports_file() {
    local file=$1
    while read -r line; do
        if [[ "_$line" == "_" ]]; then
            >&2 echo "KO 63858 empty line found in ports_file"
            exit 1
        fi
        local interface="$(echo "$line" | awk '{ print $5 }')"
        if [[ "_${interface}" == "_all" ]]; then
           echo > /dev/null
        elif [[ "_${interface}" == "_localhost" ]]; then
            echo > /dev/null
        else
            >&2 cat $file
            >&2 echo "KO 66258 Unknown network interface ${interface}. $line"
            exit 1
        fi
    done < $file
}

format_urls() {
    local file=$1
    local tmpfile=/tmp/lsvcsa
    rm -f ${tmpfile}
    touch ${tmpfile}
    echo "#      subsystem URL "  | xargs -n3 >> ${tmpfile}
    echo "-      --------- ---" | xargs -n3 >> ${tmpfile}
    cat ${file} | sort | uniq | ${nl} >> ${tmpfile}
    cat ${tmpfile} | xargs -n3 | column -t  -s' ' 
    rm -f ${tmpfile}
}

format_svcs() {
    local file=$1
    local tmpfile=/tmp/lsvcsa
    rm -f ${tmpfile}
    touch ${tmpfile}
    echo "#      subsystem systemd_svc_name "  | xargs -n3 >> ${tmpfile}
    echo "-      --------- ----------------" | xargs -n3 >> ${tmpfile}
    cat ${file} | sort | uniq | ${nl} >> ${tmpfile}
    cat ${tmpfile} | xargs -n3 | column -t  -s' ' 
    rm -f ${tmpfile}
}

format_ports() {
    local file=$1
    local tmpfile=/tmp/lportsa
    rm -f ${tmpfile}
    touch ${tmpfile}
    echo "#      subsystem ss# port protocol interface "  | xargs -n6 >> ${tmpfile}
    echo "-     --------- ---- ---- -------- ---------" | xargs -n6 >> ${tmpfile}
    cat ${file} | sort | uniq | ${nl} >> ${tmpfile}
    cat ${tmpfile} | xargs -n6 | column -t  -s' ' 
    rm -f ${tmpfile}
}

list_ports() {
    rm -f /tmp/lportsd
    touch /tmp/lportsd
    while read -r line; do
        ss=$(echo "$line" | awk '{ print $1 }')
        ss_network=$(echo "$line" | awk '{ print $2 }')
        ss_instance=$(echo "$line" | awk '{ print $3 }')
        m=$(echo "$line" | awk '{ print $4 }')
        echo -n "#    * ${ss} ${ss_network} ${ss_instance}: "
        ss__push ${ss} ${ss_network} ${ss_instance} $m
            declare_listening_tcp_ports | sed "s#^\(.*\)#${ssn} \1#" >> /tmp/lportsd
        ss__pop
    done < /tmp/ssi
    format_ports /tmp/lportsd
    rm -f /tmp/lportsd
}

enable_stack_trace() {     #https://opensource.com/article/22/7/print-stack-trace-bash-scripts
    set -E
    trap 'ERRO_LINENO=$LINENO' ERR
    trap '_failure' EXIT
}

secret_filter() {
    while read -r line; do
        echo $line | grep "=" > /dev/null
        if [[ $? -ne 0 ]]; then
            continue
        fi
        local var=$(echo $line | sed "s~^\(.*\)=.*~\1~")
        echo "$var=\"********\""
    done
}

ssh_ip__off() {
    local m=${deploy__dns_soa}
    var=${m}__method
    local method=${!var}
    if [[ "_${method}" == "_" ]]; then
        >&2 echo "KO 41985 ${m}__method is not defined."
        exit 1
    fi
    if [[ "_${method}" != "_ssh" ]]; then
        if [[ "_${method}" != "_rsync" ]]; then
            >&2 echo "KO 41986 ${m}__method definerd in cfg_hosts is neither ssh nor rsync."
            exit 1
        fi
    fi
    var=${m}__ip
    local ip=${!var}
    echo ${ip}
}

ssh_port__off() {
    local m=${deploy__dns_soa}
    var=${m}__method
    local method=${!var}
    if [[ "_${method}" == "_" ]]; then
        >&2 echo "KO 41985 ${m}__method is not defined."
        exit 1
    fi
    if [[ "_${method}" != "_ssh" ]]; then
        if [[ "_${method}" != "_rsync" ]]; then
            >&2 echo "KO 41986 ${m}__method definerd in cfg_hosts is neither ssh nor rsync."
            exit 1
        fi
    fi
    var=${m}__sshport
    local sshport=${!var}
    echo ${sshport}
}

ssn() {
    if [[ "_${ss_instance}" != "_default" ]]; then
        if [[ "_${ss_network}" != "_default" ]]; then
            echo "${ss}/${ss_network}/${ss_instance}"
        else
            echo "${ss}/${ss_instance}"
        fi
    else
        if [[ "_${ss_network}" != "_default" ]]; then
            echo "${ss}/${ss_network}"
        else
            echo "${ss}"
        fi
    fi
}

tgt_instance_identifier() {
    local base_identifier="$1"
    if [[ ! -f /tmp/ssi ]]; then
        >&2 print_stack
        >&2 echo "KO 44009"
        exit 1
    fi
    cat /tmp/ssi | grep "^${ss} " | grep " ${m}\$" > /tmp/zm34   #path based on how many SS instances are in the same machine
    let nn=$(cat /tmp/zm34 | awk '{ print $2 }' | sort | uniq | wc -l | tr -d ' ')  #num networks
    let ni=$(cat /tmp/zm34 | awk '{ print $3 }' | sort | uniq | wc -l | tr -d ' ')  #num instances
    rm /tmp/zm34
    if [[ "_${base_identifier}" == "_" ]]; then
        local sep=""
    else
        local sep="__"
    fi
    local suff="_"
    if [[ $nn -gt 1 ]]; then
        if [[ $ni -gt 1 ]]; then
            suff="${sep}${ss_network}_${ss_instance}"
        else
            suff="${sep}${ss_network}"
        fi
    else
        if [[ $ni -gt 1 ]]; then
            suff="${sep}${ss_instance}"
        else
            suff=""
        fi
    fi
    echo "${base_identifier}${suff}"
}

tgt_path__compute() {
    local base_path="$1"
    if [[ ! -f /tmp/ssi ]]; then
        >&2 print_stack
        >&2 echo "KO 44009"
        exit 1
    fi
    cat /tmp/ssi | grep "^${ss} " | grep " ${m}\$" > /tmp/zm34   #path based on how many SS instances are in the same machine
    let nn=$(cat /tmp/zm34 | awk '{ print $2 }' | sort | uniq | wc -l | tr -d ' ')  #num networks
    let ni=$(cat /tmp/zm34 | awk '{ print $3 }' | sort | uniq | wc -l | tr -d ' ')  #num instances
    rm /tmp/zm34
    if [[ $nn -gt 1 ]]; then
        base_path="${base_path}/${ss_network}"
    fi
    if [[ $ni -gt 1 ]]; then
        base_path="${base_path}/${ss_instance}"
    fi
    echo "${base_path}"
}

ss_tgt_path__compute() {
    echo $(tgt_path__compute ${ss})
}

check_no_ss() {
    let n=$(cat /tmp/cfg_ss__stack | wc -l | tr -d ' ')
    if [[ $n -gt 0 ]]; then
        >&2 echo "KO 22156 "
        exit 1
    fi
}

print_verbose() {
    if [[ $verbose -eq 0 ]]; then
        return
    fi
    echo "info: $@"
}

link_hosts__file() {
    local file=$1
    if [[ "_$file" == "_unlink" ]]; then
        rm -f cfg_hosts.env
        print_verbose "unlinked cfg_hosts"
        return
    fi
    if [[ "_$file" == "_" ]]; then
        >&2 echo "KO 89429 Required file, or 'unlink'"
        exit 1
    fi
    if [[ ! -f $file ]]; then
        >&2 echo "KO 89499 File does not exist $file"
        exit 1
    fi
    rm -f cfg_hosts.env
    ln -s $file cfg_hosts.env
    if [[ $? -ne 0 ]]; then
        2>&1 echo "KO 89698 Could not create cfg_hosts.env"
        exit 1
    fi
    print_verbose "linked cfg_hosts -> $file"
}

link_ss__file() {
    local file=$1
    if [[ "_$file" == "_unlink" ]]; then
        rm -f cfg_ss.env
        if [[ -d ${output_dir} ]]; then
            make clean
        fi
        print_verbose "unlinked cfg_ss"
        return
    fi
    if [[ "_$file" == "_" ]]; then
        >&2 echo "KO 89729 Required file, or 'unlink'"
        exit 1
    fi
    if [[ ! -f $file ]]; then
        >&2 echo "KO 89799 File does not exist $file"
        exit 1
    fi
    rm -f cfg_ss.env
    ln -s $file cfg_ss.env
    if [[ $? -ne 0 ]]; then
        >&2 echo "KO 89798 Could not create cfg_ss.env"
        exit 1
    fi
    print_verbose "linked cfg_ss -> $file"
    if [[ -d ${output_dir} ]]; then
        make clean > /dev/null
    fi
}

cfg_unlink() {
    link_hosts__file unlink
    link_ss__file unlink
}

save_cfg() {
    rm -f cfg_ss.env__off
    if [[ -f cfg_ss.env ]]; then
        mv cfg_ss.env cfg_ss.env__off
    fi
    rm -f cfg_hosts.env__off
    if [[ -f cfg_hosts.env ]]; then
        mv cfg_hosts.env cfg_hosts.env__off
    fi
}

restore_cfg() {
    rm -f cfg_ss.env
    if [[ -f cfg_ss.env__off ]]; then
        mv cfg_ss.env__off cfg_ss.env
    fi
    rm -f cfg_hosts.env
    if [[ -f cfg_hosts.env__off ]]; then
        mv cfg_hosts.env__off cfg_hosts.env
    fi
}

select_conf__hosts() {
    if [[ ! -f cfg_ss.env ]]; then
        >&2 echo "KO 36742 link cfg_ss.env first."
        exit 1
    fi
    if [[ -f cfg_ss.env ]]; then
        echo -n "Using subsystem configuration "
        ls -la cfg_ss.env | awk '{ print $NF }'
    fi
    ls -1 cfg/hosts/*.env | ${nl}
    echo -n "select target hosts configuration: "
    read x
    file=$(ls -1 cfg/hosts/*.env | ${nl} | grep -P "^ *${x}\t" | awk '{ print $NF }')
    if [[ ! -f $file ]]; then
        2>&1 echo "KO 89799 Invalid choice $file"
        exit 1
    fi
    source_cfg_ss
    load_env_hosts $file
    link_hosts__file $file
}

link_h() {
    local ask1=$1
    if [[ -f cfg_hosts.env ]]; then
        echo -n "hosts are already configured: "
        ls -la cfg_hosts.env | awk '{ print $NF }'
    else
        echo "cfg_hosts is not configured."
        x="y"
        if [[ $ask1 -eq 1 ]]; then
            echo -n "Configure hosts now? [y|n]: "
            read x
        fi
        if [[ "_$x" == "_y" ]]; then
            echo "Select target configuration"
            select_conf__hosts
            if [[ $? -ne 0 ]]; then
                exit 1
            fi
        fi
    fi
}

libdotool__print_subsystems() {
    source_env  > /dev/null
    echo "${subsystems}" | xargs -n1
}

dottify() {
    let x=0
    let x2=0
    local pfx="$1"
#    local last_ss=""
    if [[ "_${verbose_build}" != "_0" ]]; then
        while read -r line; do
            echo "$pfx$line"
        done
    else
        echo -n "$pfx..."
        let x=3
        let x2=3
        while read -r line; do
            let l=$(($x % 10))
            if [[ $l -eq 0 ]]; then
                echo -n "."
                let x2=x2+1
                if [[ $x2 -gt 160 ]]; then
                    echo
                    echo -n "$pfx"
                    let x2=0
                fi
            fi
            let x=x+1
#            if [[ $ss != $last_ss ]]; then
#                echo
#                echo "SS $ss ."
#            fi
        done
        echo
    fi
}

clear_cache() {
    local ss=$1
    local bm=${build_mode}
    if [[ "_$ss" = "_" ]]; then
        #>&2 echo "KO 20199 Clear cache: Specify subsystem or 'all'"
        ss="all"
    fi
    local cdir=${cachedir}/${bm}
    mkdir -p ${cdir}
    if [[ "_$ss" = "_all" ]]; then
        ss=""
        echo "Clear cache for build_mode ${bm} for all subsystems."
    else
        echo "Clear subsystem \"$ss\" cache for build_mode ${bm}."
    fi
    ndirs=$(echo ${cdir}/${ss} | tr '/' ' ' | xargs -n 1 | wc -l | tr -d ' ')
    if [[ $ndirs -lt 5 ]]; then
        >&2 echo "I was about to execute \"rm -rf ${cdir}\"; but I found it a bit risky."
        >&2 echo "KO 50495 Suspicious root path to delete."
        exit 1
    fi
    rm -rf ${cdir}/${ss}
}

collect_docs() {
    local cdir=${cachedir}/${build_mode}
    for i in $subsystems; do
        local docs="${cdir}/${i}/doc"
        if [[ -d "${docs}" ]]; then
            echo "${docs}"
        fi
    done
}

p2p_hostname_rewrite0() {
    local pre="$1"
    local post="$2"
    if [[ "_${pre}" == "_" ]]; then
        echo "${post}"
    else
        if [[ "_${post}" == "_" ]]; then
            echo "${pre}"
        else
            echo "${pre}-${post}"
        fi
    fi
}

p2p_hostname_rewrite() {
    local prefix="$1"
    local suffix=""
    if [[ "_${ss_network}" != "_testnet" ]]; then
        if [[ "_${ss_network}" != "_mainnet" ]]; then
            if [[ "_${ss_network}" == "_default" ]]; then
                if [[ "_${ss_instance}" == "_default" ]]; then
                    suffix=""
                else
                    suffix="${ss_instance}"
                fi
            else
                if [[ "_${ss_instance}" == "_default" ]]; then
                    suffix="${ss_network}"
                else
                    suffix="${ss_instance}-${ss_network}"
                fi
            fi
            p2p_hostname_rewrite0 "${prefix}" "${suffix}"
            return
        fi
    fi
    #mainnet/testnet genesis/user_i paradigm
    if [[ "_${ss_instance}" == "_genesis" ]]; then
        suffix="${ss_network}"
    else
        suffix="${ss_instance}-${ss_network}"
    fi
    p2p_hostname_rewrite0 "${prefix}" "${suffix}"
}

libconfigure__deps_build__apt() {
    echo "nmap "  #bin/test_deployment
    libsecrets__deps_build__apt
    if [[ -f /tmp/ssi ]]; then
        while read -r line; do
            local ss=$(echo "$line" | awk '{ print $1 }')
            local ss_network=$(echo "$line" | awk '{ print $2 }')
            local ss_instance=$(echo "$line" | awk '{ print $3 }')
            local m=$(echo "$line" | awk '{ print $4 }')
            ss__push ${ss} ${ss_network} ${ss_instance} $m
                mk_target__deps_build__apt | xargs
            ss__pop
        done < /tmp/ssi
    fi
}

libconfigure__deps_runtime__apt() {
    libsecrets__deps_runtime__apt
}

mktarget__gen_vars_echo__subcalls() {
    local prefix=$1
    local file=$2
    cat $file |                                                                     \
    grep "^function ${prefix}set_vars {" -A10000000 |                               \
    grep '^}$' -m1 -B10000000 |                                                     \
    grep "^    " |                                                                  \
    sed "s~^\(.*\)#.*~\1~"                                                          \
    |                                                                               \
    grep -v "^ *local"                                                              \
    |                                                                               \
    grep "__set_vars"                                                               \
    |                                                                               \
    sed "s~\(.*\)__set_vars\(.*\)~\1__vars__echo\2~" |                              \
    awk '{ print $1 }' |                                                            \
    sed "s~\(.*\)~    \1~"
}

mktarget__gen_vars_echo__body() {
    local prefix=$1
    local file=$2
    vars=$(cat $file | grep "^function *${prefix}set_vars {" -A10000000 | grep '^}$' -m1 -B10000000 | grep "^    " | grep -v "^ *local" | grep "^ *[a-zA-Z0-9_]*=.*" | tr '=' ' ' | awk '{ print $1 }' | xargs)
    for v in $vars; do
        echo "${v}=\"\${${v}}\""
    done
}

mktarget__gen_vars_echo() {
    local file=$1
    local prefix=$2
    if [[ "_$prefix" == "_" ]]; then
        prefix="mk_target__"
    fi
    echo "${prefix}vars__echo() {"
    echo "    ${prefix}vars__echo__header"
    echo "    cat << EOF"
    mktarget__gen_vars_echo__body $prefix $file
    echo
    echo "EOF"
    mktarget__gen_vars_echo__subcalls $prefix $file
    echo "}"
    echo
}

mk_target__gen__set_vars__review_file() {
    local f=$1
    cat $f | \
    grep "^function mk_target__set_vars {" -A10000000 | \
    grep '^}$' -m1 -B10000000 | while IFS= read -r line; do
        echo "$line"
        eval echo "\"\$line\""
    done
}

mk_target__vars__echo__gen__file() {
    local f=$1
    local g=$2
    local function_prefix=$3
    local lib=$(echo ${file} | sed "s~.*libbuild_\(.*\)*.env~\1~")
    local hash=$(sha256sum $f | awk '{ print $1 }')
    if [[ -f $g ]]; then
        fhash=$(head -n6 $g | grep "## Hash " | awk '{ print $3 }')
        if [[ "_${hash}" == "_${fhash}" ]]; then
            echo "file $g already generated from file $f"
            return
        fi
    fi
    cat << EOF > $g
#!/bin/bash
##################################################################################
## File generated from file $f
## by function mk_target__vars__echo__gen, in bin/build.sh
## 
## Hash ${hash}
##
##################################################################################

EOF
    mktarget__gen_vars_echo $f ${function_prefix} >> $g
    echo "Generated file $g from file $f"
}

once_guard_prefix="/tmp/libconfigure__once_guard__"

clean_once_guard() {
    rm -f ${once_guard_prefix}*
}

all_instances() {
    cat /tmp/ssi | grep "^${ss} ${ss_network} " | awk '{ print $3 }' | xargs
}

all_other_instances() {
    all_instances | xargs -n1 | grep -v "^${ss_instance}\$" | xargs
}

reserve_port() {
    if [[ "_$mdir" == "_" ]]; then
        >&2 print_stack
        echo "KO 60922 mdir is empty" > /tmp/stop_compilation
        echo "0" #set_env called tp invoke other non-build functions, e.g. build_deps__apt
        return
    fi
    local suffix="$1"
    if [[ "_${suffix}" == "_" ]]; then
        local identifier="${ss_tgt_path}"
    else
        local identifier="${ss_tgt_path}/${suffix}"
    fi
    #There are 3 port configuration (testnet, mainnet, default) corresponding to the ss_networks (testnet, mainnet and central)
    if [[ "_${ss_network}" == "_mainnet" ]]; then
        local base=11000
        local n=mainnet
    elif [[ "_${ss_network}" == "_testnet" ]]; then
        local base=10000
        local n=testnet
    else
        local base=12000
        local n=default
    fi
    local db="$mdir/reserved_ports__${n}"
    if [[ ! -f ${db} ]]; then
        echo "${identifier} ${base}" > ${db}
        echo "${base}"
        return
    fi
    local port=$(cat ${db} | grep "^${identifier} " | awk '{ print $2 '})
    if [[ "_$port" == "_" ]]; then
        local maxport=$(cat ${db} | awk '{ print $2 '} | sort -n | tail -n1)
        let port=${maxport}+1
        echo "${identifier} ${port}" >> ${db}
    fi
    echo "${port}"
}

std_path__svr() {
    echo "/svr/${system_unix_name}/${ss_tgt_path}"
}

std_path__var_log() {
    echo "/var/log/${system_unix_name}/${ss_tgt_path}"
}

std_path__etc() {
    echo "/etc/${system_unix_name}/${ss_tgt_path}"
}

banner__hello() {
    cat << EOF
 #########################################################
#                                                         #
#   _   _      _ _         _____           _       _      #
#  | | | |    | | |       /  ___|         (_)     | |     #
#  | |_| | ___| | | ___   \\ \`--.  ___ _ __ _ _ __ | |_    #
#  |  _  |/ _ \\ | |/ _ \\   \`--. \\/ __| '__| | '_ \\| __|   #
#  | | | |  __/ | | (_) | /\\__/ / (__| |  | | |_) | |_    #
#  \\_| |_/\\___|_|_|\\___/  \\____/ \\___|_|  |_| .__/ \\__|   #
#                                           | |           #
#                                           |_|           #
#                                                         #
 #########################################################
EOF
}

banner__bye() {
    cat << EOF
 #########################################################
#                                                         #
#     ______              _____           _       _       #
#     | ___ \\            /  ___|         (_)     | |      #
#     | |_/ /_   _  ___  \\ \`--.  ___ _ __ _ _ __ | |_     #
#     | ___ \\ | | |/ _ \\  \`--. \\/ __| '__| | '_ \\| __|    #
#     | |_/ / |_| |  __/ /\\__/ / (__| |  | | |_) | |_     #
#     \\____/ \\__, |\\___| \\____/ \\___|_|  |_| .__/ \\__|    #
#             __/ |                        | |            #
#            |___/                         |_|            #
#                                                         #
 #########################################################
EOF
}

#-----------------------------------------------------------------
#    libOOP - class stcfg 
#-----------------------------------------------------------------

libconf_machines=""
libconf_machines_oop_selected_mne=""

libconf_machines__poke() { ## 1:identifier 3:value
    liboop__poke__ "libconf_machines" "${libconf_machines_oop_selected_mne}" "$1" "$2"
}

libconf_machines__peek() { ## 1:identifier
    liboop__peek__ "libconf_machines" "${libconf_machines_oop_selected_mne}" "$1"
}

libconf_machines_select() {
    libconf_machines_oop_selected_mne="$1"
}

libconf_machines_selected() {
    echo "${libconf_machines_oop_selected_mne}"
}

#-----------------------------------------------------------------
target_machine() {
    local mne=$1
    libconf_machines=$(echo "$libconf_machines $mne" | xargs -n1 | sort | uniq | xargs)
    libconf_machines_select $mne
}

add_ss() {
    local ss=$1
    local network=$2
    local instance="$3"
    if [[ "_${ss}" == "_" ]]; then
        >&2 echo "KO 91126 empty SS."
        exit 1
    fi
    if [[ "_${network}" == "_" ]]; then
        network="default"
    fi
    if [[ "_${instance}" == "_" ]]; then
        instance="default"
    fi
    #local subsystems="$(libconf_machines__peek subsystems)"
    #subsystems=$(echo "$subsystems $ss{${instance}}" | xargs -n1 | sort | uniq | xargs)
    #libconf_machines__poke subsystems "${subsystems}"

    cat << EOF >> /tmp/ssi
${ss} ${network} ${instance} ${libconf_machines_oop_selected_mne}
EOF
}

libconfigure__find_home() {
    local dir="${1:-$(pwd)}"
#>&2 echo "find_home pwd=$(pwd) dir=$dir"
    if [ -d "$dir/.dtool" ]; then
        echo "$dir"
#>&2 echo "ret: $dir"
    elif [ "$dir" = "/" ]; then
        echo "$HOME"
#>&2 echo "ret: $HOME"
    else
        libconfigure__find_home "$(dirname "$dir")"
    fi
}

libconfigure__init__home() {
    if [[ ! -z "$datadir" ]]; then
        #home already set
        return
    fi
    if [[ -z ${libconfigure__home} ]]; then
        libconfigure__home=$(libconfigure__find_home)
    fi
    if [[ ! -d ${libconfigure__home} ]]; then
        >&2 echo "KO 55943 home dir ${libconfigure__home} doesn't exist."
        exit 1
    fi
    libconfigure__home=$(realpath ${libconfigure__home})
    libconfigure__progname="dotool"
    datadir=${libconfigure__home}/.${libconfigure__progname}
    mkdir -p ${datadir}
    #datadir=$(realpath ${datadir})
}

libconfigure__init__include() {
    . ${libdir}/shenv
    . ${libdir}/stcfg.env
    . ${libdir}/libvmpool.env
    . ${libdir}/vm/pool.env
    . ${libdir}/vm/leases.env
    . ${libdir}/libsecrets.env
}

libconfigure__init__cache() {
    cachedir=${datadir}/cache
    mkdir -p ${datadir}/cache
}

libconfigure__generate_random_secret_file() {
    cat << EOF
version="1"

EOF
}

libconfigure__load_secrets() {
    local f=${secrets_root}/dotool.env
    if [[ ! -f $f ]]; then #secret bag is virgin. Write a random unique values.
        mkdir -p ${secrets_root}
        libconfigure__generate_random_secret_file > $f
    fi
    . $f
}

is_abs_path() {
    [[ "$1" = /* ]]
}

libconfigure__init__secrets() {
    if [[ -z "${secrets_root}" ]]; then
        >&2 echo "KO 77960 secrets_root is empty."
        exit 1
    fi
    if ! is_abs_path ${secrets_root}; then
        secrets_root=$(realpath ${libdotool__root_worktree}/${secrets_root})
    fi
    if [[ ! -d "${secrets_root}" ]]; then
        mkdir -p ${secrets_root}
        if [[ $? -ne 0 ]]; then
            >&2 echo "KO 78988 secrets drive don't exist and cannot be created. ${secrets_root}"
            exit 1
        fi
    fi
    libconfigure__load_secrets
}

check__build__target_OS() {
    case "${build__target_OS}" in
        debian_12_stable | debian_12_testing | debian_sid | ubuntu_24 | ubuntu_24_10)
            return
            ;;
        *)
            >&2 echo "KO 44873 Unknown build__target_OS: ${build__target_OS}"
            exit 1
            ;;
    esac
}

libconfigure__set_dev() {
    devuser=${dev_handle,,}
    vm__ci="$(vm_ci ${dev_handle})"
    my_vm__test="$(vm_dev ${dev_handle})"
    my_vm__node="$(vm_nod ${dev_handle})"
    my_vm__testnet__node="$(vm_tn ${dev_handle})"
    local prev=$stcfg__id
    stcfg__use libconfigure
    stcfg__set_value "dev_handle" "${dev_handle}" 0
    stcfg__use $prev
}

libconfigure__print_build_debs() {
    rm -f /tmp/apt
    touch /tmp/apt
    libweb__tech="nginx"
    . cfg/system.env
    . ${libdir}/libdeploy.env
    system__deps_build__apt >> /tmp/apt
    libsecrets__deps_build__apt >> /tmp/apt
    libconfigure__deps_build__apt >> /tmp/apt
    libdeploy__deps_build__apt >> /tmp/apt
    find lib/mk_target -type f  | while read -r line; do
        . $line
    done
    find lib/mk_target -type f  | while read -r line; do
        fn=$(cat $line | grep deps_build__apt | sed "s/^\(.*__deps_build__apt\).*/\1/" | grep -v "{ss_deps_build__apt}" | grep -v "^sc/" | awk '{ print $NF }')
        if [[ $? -eq 0 ]]; then
            if [[ ! -z $fn ]]; then
                $fn  >> /tmp/apt
            fi
        fi
    done
    list_all_ss | while read -r line; do
        . $line/lib/mk_target.env
        fn=$(cat $line/lib/mk_target.env | grep deps_build__apt | sed "s/^\(.*__deps_build__apt\).*/\1/" | grep -v "{ss_deps_build__apt}" | grep -v "ss_deps_build__apt=" | grep -v "^sc/" | awk '{ print $NF }')
        if [[ ! -z $fn ]]; then
            $fn  >> /tmp/apt
        fi
    done
    apt=$(cat /tmp/apt | xargs -n1 | sort | uniq | xargs)
    rm -f /tmp/apt
    echo "${apt}"
}

banner__hello() {
    figlet "Hello System"
    echo "Using dtool: dev/devops tool. https://github.com/mm-s/dtool"
}


banner__bye() {
    echo "Using dtool: dev/devops tool. https://github.com/mm-s/dtool"
    figlet "Bye System"
}


libconfigure__init() {

    if git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
        local key value
        if [ -f .git ] && grep -q "gitdir: .*worktrees" .git; then
            libdotool__root_worktree=$(grep "gitdir: .*worktrees" .git | head -n1 | awk '{ print $2 }' | sed 's~\(.*\)/\.git/.*~\1~')
        else
            libdotool__root_worktree=$(pwd)
        fi
        #print_git_info
        #exit 1
    else
            >&2 echo "KO 44039 Not inside a Git repository"
            exit 1
    fi


    libconfigure__init__home
    libconfigure__init__include

    system_home=$(pwd)

    stcfg__init libconfigure ${datadir}/config

    output_dir=_targets
    nl="nl -w3 -n rn"

    rm -f /tmp/ssi

    libconfigure__init__secrets
    libconfigure__init__cache

    cfg_hosts=cfg_hosts.env
    rm -f /tmp/cfg_hosts__stack
    if [[ -f /tmp/cfg_hosts__stack ]]; then  #if this program has been used as root files left behind (e.g. when interrupted before cleaning up) could be untouchable
        >&2 echo "KO 33209 please delete /tmp/cfg_hosts__stack"
        exit 1
    fi
    touch /tmp/cfg_hosts__stack
    rm -f /tmp/cfg_ss__stack
    if [[ -f /tmp/cfg_ss__stack ]]; then
        >&2 echo "KO 33210 please delete /tmp/cfg_ss__stack"
        exit 1
    fi
    touch /tmp/cfg_ss__stack
    clean_once_guard
    check__build__target_OS
}

libconfigure__cleanup() {
    rm -f /tmp/cfg_hosts__stack
    rm -f /tmp/cfg_ss__stack
    rm -f /tmp/apt
    clean_once_guard
}

libconfigure__init

