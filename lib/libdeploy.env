#!/bin/bash

. lib/libconfigure.env
. lib/libvmpool.env
. lib/vm/pool.env
. lib/vm/leases.env
. lib/libbind.env

let dryrun_deploy=0

libdeploy__deps_build__apt() {
    cat << EOF
nmap
rsync
ssh
awscli
EOF
}

libdeploy__deps_runtime__apt() {
    cat << EOF
nmap
EOF
}

#fetch_data() {
#    local vma=$1
#    local hot_upgrade__info_file=$2

#    if [[ "_${fetch_home}" == "_" ]]; then
#        echo "fetch_home not defined; skipping fetch data."
#        return
#    fi
#    if [[ ! -f ${hot_upgrade__info_file} ]]; then
#        echo "hot_upgrade__info_file not found; skipping fetch data."
#        return
#    fi
#    if [[ $vma == "" ]]; then
#        >&2 echo "KO 44390 vma (VM alias) is not defined for mne $mne"
#        exit 1
#    fi
#    bin/fetch ${fetch_home} fetch ${vma} ${hot_upgrade__info_file} ${dryrun_deploy}
#}

#push_data() {
#    local vma=$1
#    local hot_upgrade__info_file=$2

#    if [[ "_${fetch_home}" == "_" ]]; then
#        echo "fetch_home not defined; skipping push data."
#        return
#    fi
#    if [[ ! -f ${hot_upgrade__info_file} ]]; then
#        echo "hot_upgrade__info_file not found; skipping fetch data."
#        return
#    fi
#    if [[ $vma == "" ]]; then
#        >&2 echo "KO 44391 vma is not defined for mne $mne"
#        exit 1
#    fi
#    bin/fetch ${fetch_home} push ${vma} ${hot_upgrade__info_file} ${dryrun_deploy}
#}

let libdeploy__ssh_timeout=0

aws_dryrun() {
    local ret=0
    if [[ $dryrun_deploy -eq 0 ]]; then
        cat << EOF
echo "-------------------------"
execute from: $(pwd)
execute: aws $@
echo "-------------------------"
EOF
        aws $@
    else
        cat << EOF
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% DRYRUN: would execute: aws $@
%%         from: $(pwd)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

EOF
    fi
}

ssh_dryrun() {
    local sshport="$1"
    local url="$2"
    local cmd="$3"
    local ret=0
    if [[ $dryrun_deploy -eq 0 ]]; then
        local timeoutcmd=""
        #if [[ ${libdeploy__ssh_timeout} -gt 0 ]]; then
        timeoutcmd="timeout ${libdeploy__ssh_timeout}"
        let libdeploy__ssh_timeout=0
        #fi        
        cat << EOF
-------------------------
execute from: $(pwd)
execute: $timeoutcmd ssh -n -p ${sshport} ${url} "${cmd}"
-------------------------
EOF
        $timeoutcmd ssh -n -p ${sshport} ${url} "${cmd}"
    else
        cat << EOF
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% DRYRUN: would execute: ssh -n -p ${sshport} ${url} "${cmd}"
%%         from: $(pwd)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

EOF
    fi
}

rsync__progress=(-h --info=progress2)

rsync_dryrun() {
    local sshport="$1"
    local from="$2"
    local to="$3"

    local rsync_opts=(-arz "${rsync__progress[@]}" --no-g --perms -e "ssh -p ${sshport}")
    local mode_msg="EXECUTING"
    if [[ $dryrun_deploy -ne 0 ]]; then
        rsync_opts+=(--dry-run)
        mode_msg="DRYRUN"
    fi

    cat << EOF
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% $mode_msg: rsync ${rsync_opts[*]} $from $to
%% From: $(pwd)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
EOF

    rsync "${rsync_opts[@]}" "$from" "$to"
}

rsync_d_dryrun() {
    local sshport="$1"
    local from="$2"
    local to="$3"

    local rsync_opts=(-arz "${rsync__progress[@]}" --no-g --perms --delete -e "ssh -p ${sshport}")
    local mode_msg="EXECUTING"
    if [[ $dryrun_deploy -ne 0 ]]; then
        rsync_opts+=(--dry-run)
        mode_msg="DRYRUN"
    fi

    cat << EOF
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% $mode_msg: rsync ${rsync_opts[*]} $from $to
%% From: $(pwd)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
EOF

    rsync "${rsync_opts[@]}" "$from" "$to"
}


: << OIF

rsync__progress=(-h --info=progress2)

rsync_dryrun() {
    local sshport="$1"
    local from="$2"
    local to="$3"
    if [[ $dryrun_deploy -eq 0 ]]; then
        cat << EOF
-------------------------
execute from: $(pwd)
execute: rsync -arz ${rsync__progress[*]} --no-g --perms -e "ssh -p ${sshport}" ${from} ${to}
-------------------------
EOF
        rsync -arz "${rsync__progress[@]}" --no-g --perms -e "ssh -p ${sshport}" "${from}" "${to}"
    else
        cat << EOF
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% DRYRUN: would execute: rsync -arz --no-g --perms -e "ssh -p ${sshport}" ${from} ${to}
%%         from: $(pwd)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

EOF
    fi
}

rsync_dryrun() {
    local sshport="$1"
    local from="$2"
    local to="$3"
    if [[ $dryrun_deploy -eq 0 ]]; then
        cat << EOF
-------------------------
execute from: $(pwd)
execute: rsync -arz ${rsync__progress} --no-g --perms -e "ssh -p ${sshport}" ${from} ${to}
-------------------------
EOF
        rsync -arz ${rsync__progress} --no-g --perms -e "ssh -p ${sshport}" ${from} ${to}
    else
        cat << EOF
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% DRYRUN: would execute: rsync -arz --no-g --perms -e "ssh -p ${sshport}" ${from} ${to}
%%         from: $(pwd)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

EOF
    fi
}


rsync_d_dryrun() {
    local sshport="$1"
    local from="$2"
    local to="$3"
    if [[ $dryrun_deploy -eq 0 ]]; then
        cat << EOF
-------------------------
execute from: $(pwd)
execute: rsync -arz --no-g --perms --delete -e "ssh -p ${sshport}" ${from} ${to}
-------------------------
EOF
        rsync -arz --no-g --perms --delete -e "ssh -p ${sshport}" ${from} ${to}
    else
        cat << EOF
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% DRYRUN: would execute: rsync -arz --no-g --perms --delete -e "ssh -p ${sshport}" ${from} ${to}
%%         from: $(pwd)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

EOF
    fi
}

OIF

scp_dryrun() {
    local sshport="$1"
    local from="$2"
    local to="$3"
    if [[ $dryrun_deploy -eq 0 ]]; then
        cat << EOF
-------------------------
execute from: $(pwd)
execute: scp -P ${sshport} ${from} ${to}
-------------------------
EOF
        scp -P ${sshport} ${from} ${to}
    else
        cat << EOF
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% DRYRUN: would execute: scp -P ${sshport} ${from} ${to};
%%         from: $(pwd)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

EOF
    fi
}

test_os() {
    local vma=$1
    local sshport=22
    local user=root
    make_vm_a_known_host ${vma}
    check_connectivity ${vma}
    libvmpool__vm_as $vma m0
    echo "checking target glibc version. build for $glibc_version"
    if [[ -z "${glibc_version}" ]]; then
        >&2 echo "KO 44938 glibc_version not defined."
    fi
#    ssh_dryrun ${sshport} ${user}@${m0__server_name} "glibc_required_version='${glibc_version}'; glibc_installed_version=\$(ldd --version | head -n1 | awk '{print \$NF}'); echo \$glibc_installed_version; if printf '%s\n%s' \"\$glibc_required_version\" \"\$glibc_installed_version\" | sort -V -C; then echo \"glibc version is \$glibc_installed_version (>= \$glibc_required_version)\"; else echo \"KO 33098 glibc version is \$glibc_installed_version (< \$glibc_required_version)\"; exit 1; fi"

ssh_dryrun ${sshport} ${user}@${m0__server_name} \
"glibc_required_version='${glibc_version}'; \
glibc_installed_version=\$(ldd --version | head -n1 | awk '{print \$NF}'); \
echo \"glibc installed: \$glibc_installed_version\"; \
if printf '%s\n%s' \"\$glibc_required_version\" \"\$glibc_installed_version\" | sort -V -C; then \
    echo \"glibc version is \$glibc_installed_version (>= \$glibc_required_version)\"; \
else \
    echo \"KO 33098 glibc version is \$glibc_installed_version (< \$glibc_required_version)\"; \
    exit 1; \
fi"


    if [[ $? -ne 0 ]]; then
        >&2 echo "KO 65783 ❌ SSH command failed or glibc version is too old."
        exit 1
    else
        echo "Ok glibc"
    fi
}

deploy__rsync() {
    local vma=$1
    local mdir=$2
    local jail=${mdir}/jail;
    local sshport=22
    local user=root
    libvmpool__vm_as $vma m0
#    echo "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
#    echo "DELETE AFTER 1 ITERATION"
#    echo "Transferring patch ctl to target"
#    scp_dryrun ${sshport} ${jail}/usr/local/bin/script_tv__ctl.sh ${user}@${m0__server_name}:/usr/local/bin/
#    scp_dryrun ${sshport} ${jail}/var/script_tv/hot_upgrade__info ${user}@${m0__server_name}:/var/script_tv/
#    echo "DELETE AFTER 1 ITERATION"
#    echo "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
    local statedir="/root/node_state__deploy"
    if [[ "_${fetch_home}" != "_" ]]; then
        echo "stopping services + save_state.."
        ssh_dryrun ${sshport} ${user}@${m0__server_name} "rm -rf ${statedir} && /usr/local/bin/script_tv__ctl.sh move_node_state ${statedir}"
    else
        echo "stopping services.."
        ssh_dryrun ${sshport} ${user}@${m0__server_name} "/usr/local/bin/script_tv__ctl.sh stop"
    fi
#    if [[ "_${system_allow_reinstall}" != "_yes" ]]; then
        echo "executing uninstaller.."
        ssh_dryrun ${sshport} ${user}@${m0__server_name} "[[ -x /usr/local/bin/script_tv__uninstall.sh ]] && /usr/local/bin/script_tv__uninstall.sh"
#    fi
    echo "rsyncing target.." #--progress 
    rsync_dryrun ${sshport} ${jail}/ ${user}@${m0__server_name}:/
    if [[ $? -ne 0 ]]; then
        >&2 echo "KO 65784 "
        exit 1
    fi
    echo "Transferring installer to target"
    scp_dryrun ${sshport} ${mdir}/system__install.sh ${user}@${m0__server_name}:/tmp/
    if [[ $? -ne 0 ]]; then
        >&2 echo "KO 65783 "
        exit 1
    fi
    local flags=""
    if [[ "_${fetch_home}" != "_" ]]; then
        flags="--no-start"
    fi
    echo "Executing installer on target. flags $flags"
#    rm -f /tmp/outpx321
#    touch /tmp/outpx321
    ssh_dryrun ${sshport} ${user}@${m0__server_name} "/tmp/system__install.sh ${flags} rsync" # 2>&1 | tee /tmp/outpx321 
    if [[ $? -ne 0 ]]; then
        >&2 echo "KO 68962 Install failed"
#        rm -f /tmp/outpx321
        exit 1
    fi
#    if [[ $dryrun_deploy -eq 0 ]]; then
#        local ll=$(tail -n1 /tmp/outpx321)
#        if [[ "_${ll}" != "_==DONE==" ]]; then
#            rm -f /tmp/outpx321
#            >&2 echo "KO 67964 Install ${mdir} failed. logfile at ${logfile}"
#            exit 1
#        fi
#    fi
    if [[ "_${fetch_home}" != "_" ]]; then
        echo "Restoring state and starting services.."
        ssh_dryrun ${sshport} ${user}@${m0__server_name} "/usr/local/bin/script_tv__ctl.sh restore_node_state ${statedir} && /usr/local/bin/script_tv__ctl.sh start"
    else
        echo "starting services.."
        ssh_dryrun ${sshport} ${user}@${m0__server_name} "/usr/local/bin/script_tv__ctl.sh start"
    fi
#    rm -f /tmp/outpx321
}

#deploy__rsync__off() {
#    local vma=$1
#    local mdir=$2
#    local jail=${mdir}/jail;

#    local sshport=22
#    local user=root
#    make_vm_a_known_host ${vm}
#    check_connectivity ${vm}

#    libvmpool__vm_as $vma m0

#    echo "stopping services.."
#    ssh_dryrun ${sshport} ${user}@${m0__server_name} "/usr/local/bin/script_tv__ctl.sh stop"

#    echo "fetch backup data.."
#    fetch_data ${vma} ${mdir}/hot_upgrade__info
#    echo

#    if [[ "_${system_allow_reinstall}" != "_yes" ]]; then
#        echo "executing uninstaller.."
#        ssh_dryrun ${sshport} ${user}@${m0__server_name} "[[ -x /usr/local/bin/script_tv__uninstall.sh ]] && /usr/local/bin/script_tv__uninstall.sh"
#    fi
#    echo "rsyncing target.." #--progress 
#    rsync_dryrun ${sshport} ${jail}/ ${user}@${m0__server_name}:/
#    if [[ $? -ne 0 ]]; then
#        >&2 echo "KO 65784 "
#        exit 1
#    fi
#    echo "Transferring installer to target"
#    scp_dryrun ${sshport} ${mdir}/system__install.sh ${user}@${m0__server_name}:/tmp/
#    if [[ $? -ne 0 ]]; then
#        >&2 echo "KO 65783 "
#        exit 1
#    fi
#    local flags=""
#    if [[ "_${fetch_home}" != "_" ]]; then
#        flags="--no-start"
#    fi
#    echo "Executing installer on target. flags $flags"
#    rm -f /tmp/outpx321
#    ssh_dryrun ${sshport} ${user}@${m0__server_name} "/tmp/system__install.sh ${flags} rsync" 2>&1 | tee /tmp/outpx321 
#    if [[ $r -ne 0 ]]; then
#        >&2 echo "KO 68962 Install failed"
#        rm -f /tmp/outpx321
#        exit 1
#    fi

#    if [[ $dryrun_deploy -eq 0 ]]; then
#        local ll=$(tail -n1 /tmp/outpx321)
#        if [[ "_${ll}" != "_==DONE==" ]]; then
#            rm -f /tmp/outpx321
#            >&2 echo "KO 67964 Install ${mdir} failed. logfile at ${logfile}"
#            exit 1
#        fi
#    fi

#    echo "push backup data.."
#    push_data ${vma} ${mdir}/hot_upgrade__info
#    echo

#    echo "starting services.."
#    ssh_dryrun ${sshport} ${user}@${m0__server_name} "/usr/local/bin/script_tv__ctl.sh start"
#    echo

#    rm -f /tmp/outpx321

#}

deploy__ssh() {
    local vma=$1
    local mdir=$2
    local jail=${mdir}/jail;
    local sshport=22
    local user=root
    local ssh="ssh -p ${sshport}"
    local scp="scp -P ${sshport}"

    libvmpool__vm_as $vma m0

    echo "Deploying into machine ${vma}. ssh info: ${user}@${m0__server_name}:${sshport}"
    pushd ${targets}/$m > /dev/null
        echo "compressing files for transmission"
        tar -czf system.tgz jail
    popd
    echo "Transferring installer to target"
    $scp ${targets}/$m/system.tgz ${user}@${m0__server_name}:/tmp/
    $scp ${targets}/$m/system__install.sh ${user}@${m0__server_name}:/tmp/
    echo "Executing installer on target"
    mkdir -p log/deploy/$m
    2>&1 $ssh ${user}@${m0__server_name} "/tmp/system__install.sh ssh /tmp/system.tgz"
    if [[ $r -ne 0 ]]; then
        >&2 echo "KO 69963 Install failed"
        exit 1
    fi
}

deploy__local() {
    local mdir=$1
    local jail=${mdir}/jail
    echo "Installing on this machine."
    2>&1 ${mdir}/system__install.sh local ${jail}
    if [[ $r -ne 0 ]]; then
        >&2 echo "KO 69961 Install failed"
        exit 1
    fi
}

deploy__() {
    >&2 echo "KO 78686 empty method"
    exit 1
}

check_connectivity() {
    local vm=$(vm_root_name $1)
    make_vm_a_known_host ${vm}
    libvmpool__vm_as ${vm} m0
    echo "-------------------------------------"
    echo "testing ssh connectivity to $1 - ${m0__vm}"
    echo "-------------------------------------"
    local cmd="echo \"Hi from server ${m0__vm} !!.\""
    libvmpool__print_vm ${m0__vm}
    libdeploy__ssh_timeout=10
    ssh_dryrun ${m0__sshport} root@${m0__server_name} "$cmd"
#    timeout 10 ssh -p ${m0__sshport} root@${m0__server_name} "$cmd"
    if [[ $? -ne 0 ]]; then
        >&2 echo "ssh -p ${m0__sshport} root@${m0__server_name}"
        >&2 echo "${m0__vm} is not accessible as user root."
        exit 1
    fi
    echo
}

update_nameservers__bind() {
    local hosts_file="$1"
    local subdomain="$2"
    local domain="$3"
    if [[ "_${subdomain}" != "_" ]]; then
        local zone="${subdomain}.${domain}"
    else
        local zone="${domain}"
    fi
    bind__init
    check_connectivity ${bind__vm__pri}
    check_connectivity ${bind__vm__red}
    destfile="/tmp/db.${zone}"
    echo "zone: $zone - destfile: ${destfile}"
    bind__domain="${domain}"
    cat << EOF
#################################################################################
## ${zone} zone file.
#################################################################################
EOF
    bind__subzone__hosts_file "${subdomain}" "${hosts_file}" | tee ${destfile} | sed 's~\(.*\)~## \1~'
    cat << EOF
#################################################################################

EOF
    bind__upload_zone_file ${destfile}
    rm ${destfile}
}

update_nameservers__etc_hosts() {
    local hosts_file="$1"
    local subdomain="$2"
    local domain="$3"

    echo "KO 33092 NOT IMPLEMENTED etc_hosts method"
}

update_nameservers__cloudflare() {
    local hosts_file="$1"
    local subdomain="$2"
    local domain="$3"
    if [[ "_${subdomain}" != "_" ]]; then
        local zone="${subdomain}.${domain}"
    else
        local zone="${domain}"
    fi
    bind__init
    destfile="/tmp/db.${zone}"
    echo "zone: $zone - destfile: ${destfile}"
    bind__domain="${domain}"

    cat << EOF
#################################################################################
## ${zone} zone file. information for cloudflare.
#################################################################################
EOF
    bind__subzone__hosts_file__ext "${subdomain}" "${hosts_file}" | tee ${destfile} | sed 's~\(.*\)~## \1~'
    cat << EOF
#################################################################################

EOF
    rm ${destfile}
}

select_conf__hosts__depl() {
    ls -1 cfg/hosts/*.env | ${nl}
    echo -n "select target hosts configuration: "
    read x
    file=$(ls -1 cfg/hosts/*.env | ${nl} | grep -P "^ *${x}\t" | awk '{ print $NF }')
    if [[ ! -f $file ]]; then
        2>&1 echo "KO 89799 Invalid choice $file"
        exit 1
    fi
    load_env_hosts $file
#    echo "Subsystems:"
#    for ss in ${subsystems}; do
#        echo -n "    $ss"
#        local var=deploy__$ss
#        local m=${!var}
#        if [[ "_$m" == "_" ]]; then
#            local var=deploy__all
#            local m=${!var}
#            if [[ "_$m" == "_" ]]; then
#                >&2 echo
#                >&2 echo "KO 44094 env deploy__${ss} (or deploy__all) not defined"
#                exit 1
#            fi
#        fi
#        echo " installs in machine $m"
#        local var=${m}__method
#        local method=${!var}
#        check_method__$method $m
#    done
    link_hosts__file $file
}

link_h_depl() {
    if [[ -f cfg_hosts.env ]]; then
        echo -n "cfg_hosts.env already exist: "
        ls -la cfg_hosts.env | awk '{ print $NF }'
    else
        echo "cfg_hosts is not configured."
        echo "Select target configuration"
        select_conf__hosts__depl
        if [[ $? -ne 0 ]]; then
            exit 1
        fi
    fi
}

check_input() {
    echo "checking _targets dir"
    bin/test_targets ${targets}
    if [[ $? -ne 0 ]]; then
        >&2 print_stack
        >&2 echo "KO 93474 bin/test_targets ${targets} exited with errors."
        exit 1
    fi
    cfg_hosts=cfg_hosts.env
    if [[ ! -f ${cfg_hosts} ]]; then
        link_h_depl
    fi
    if [[ ! -f ${cfg_hosts} ]]; then
        >&2 echo "KO 78688 ${cfg_hosts} doesn't exist"
        exit 1
    fi
}

check_m_files() {
    local m=$1
    if [[ ! -d ${targets}/$m/jail ]]; then
        >&2 echo "KO 19011 ${targets}/$m/jail not found"
        exit 1
    fi
    if [[ ! -f ${targets}/$m/system__install.sh ]]; then
        >&2 echo "KO 19011 ${targets}/$m/system__install.sh not found"
        exit 1
    fi
}

system__DNS__method() {
    if [[ "_${system__DNS__domain}" == "_script.tv" ]]; then
        echo "cloudflare"
    elif [[ "_${system__DNS__domain}" == "_cto.script.tv" ]]; then
        echo "bind"
    else
        echo "etc_hosts"
    fi
}

load_env_targets() {
    targets="$1"
    targets_conf_hash=$(cat ${targets}/conf_hash)
    cur_conf_hash=$(conf_hash)
    check_input
    load_env_hosts ${cfg_hosts}

    ## #################################################################################################
    ## system__DNS__domain="cto.script.tv"
    ## system__DNS__subdomain="mm"
    ## #################################################################################################
    . ${targets}/env
    ## ##################################################################################################
}


