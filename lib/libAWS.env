#!/usr/bin/env bash
. ${libdir}/libvmpool.env

#see also file lib/vm/pool.env

function pool_2_region {
    local pool=$1
    if [[ "_${pool}" == "_OHI" ]]; then
        echo "us-east-2"
    elif [[ "_${pool}" == "_STO" ]]; then
        echo "en-north-1"
    elif [[ "_${pool}" == "_MUM" ]]; then
        echo "ap-south-1"
    elif [[ "_${pool}" == "_LON" ]]; then
        echo "eu-west-2"
    elif [[ "_${pool}" == "_L_MUM" ]]; then
        echo "ap-south-1"
    elif [[ "_${pool}" == "_L_FRA" ]]; then
        echo "eu-west-3"
    else
        echo "eu-central-1"
    fi
}

function get_pub_key {
    pub_key=$1       # public key (key itself)
    pem_filename=$2  # OR private key (path to pem file)
    if [[ "_${pub_key}" != "_" ]]; then
        echo "${pub_key}"
        exit 0
    fi
    if [[ "_${pem_filename}" == "_" ]]; then
        >&2 echo "KO 85985 should provide public or private key"
        exit 1
    fi
    echo $(ssh-keygen -y -f ${pem_filename})
}

function set_region {
    local pool=$1 
    local region=$(pool_2_region "${pool}")
    export TF_VAR_region=${region}
}

function set_public_key {
    local pub_key=$1       # public key (key itself)
    local pem_filename=$2  # OR private key (path to pem file)

    local public_key=$(get_pub_key "${pub_key}" "${pem_filename}")
    export TF_VAR_public_key=${public_key}
    echo "Using public key ${public_key}"
}

function libAWS__create_vm {
    local pool=$1          # "OHI"
    local name=$2          # "VM_OHI_22"
    local type=$3          # "t3.small"
    local os=$4            # "debian"
    local pub_key=$5       # public key (key itself)
    local pem_filename=$6  # OR private key (path to pem file)

    local region=$(pool_2_region "${pool}")
    set_region "${pool}"
    set_public_key "${pub_key}" "${pem_filename}"
    local public_key=$(get_pub_key "${pub_key}" "${pem_filename}")
    echo "Using public key ${public_key}"

    pushd terraform1 > /dev/null
        terraform init
        if [[ $? -ne 0 ]]; then
            >&2 echo "KO 83981 error initializing terraform"
            exit 1
        fi
        local private_key_str=""
        if [[ "_${pem_filename}" != "_" ]]; then
            private_key_str="private_key_path = \"${pem_filename}\""
        fi

        local ofile="${name}.tf"
        cat << EOF > ${ofile}     
module "${name}" {
  source        = "./modules/one_instance"
  base_name     = "${name}"
  public_key    = "${public_key}"
  instance_type = "${type}"
  ${private_key_str}
  providers = {
    aws = aws.${region}
  }
}
output "${name}_id" {
  value = module.${name}.info.id
}
output "${name}_region" {
  value = "${region}"
}
output "${name}_public_ip" {
  value = module.${name}.info.public_ip
}
output "${name}_instance_state" {
  value = module.${name}.info.instance_state
}
#output "${name}_images" {
#  value = module.${name}.images
#}

EOF
        terraform init
        if [[ $? -ne 0 ]]; then
            >&2 echo "KO 83981 error running terraform init"
            exit 1
        fi
        terraform apply -auto-approve
        # terraform apply 
        if [[ $? -ne 0 ]]; then
            >&2 echo "KO 83981 error running terraform apply"
            exit 1
        fi

        ## AWS API
        ## -> Set VM Name
        ## -> OS debian
        ## -> default sec group  -> Inbound Rules -> All traffic, All IPs (0.0.0.0) 
        ## -> key_pair.-
        ##     If exists in AWS a keypair matchin ${pem_filename}, select it
        ##     If it doesn't exist, then create a new keypair with this name, download the file, write as the given filename
        terraform output  | sed 's/ *= */=/' > /tmp/tvar_1232
        . /tmp/tvar_1232
        rm /tmp/tvar_1232

        local var="${name}_region"
        local ip=${!var}
        echo "## region=${region}"
        local var="${name}_public_ip"
        local ip=${!var}
        echo "## ip=${ip}"
        local var="${name}_id"
        local instance_name=${!var}
        echo "## instance_name=${instance_name}"
        local var="${name}_instance_state"
        local instance_state=${!var}
        echo "## instance_state=${instance_state}"
        # libAWS__new_vm=$(libvmpool_register_new_vm "${pool}" "${name}" "${os}" "${ip}" "${instance_name}" "${type}" "${region_pem_file}") 
        libvmpool_register_new_vm "${pool}" "${name}" "${os}" "${ip}" "${instance_name}" "${type}" "${region_pem_file}"
    popd > /dev/null
}

function libAWS__check_vm {
    local name=$1
    local pub_key=$2       # public key (key itself)
    local pem_filename=$3  # OR private key (path to pem file)

    set_region "${pool}"
    set_public_key "${pub_key}" "${pem_filename}"

    echo "#### checking ${name}"
    pushd terraform1 > /dev/null
        terraform output  | sed 's/ *= */=/' > /tmp/tvar_1232
        . /tmp/tvar_1232
        rm /tmp/tvar_1232

        local var="${name}_region"
        local ip=${!var}
        echo "## region=${region}"
        local var="${name}_public_ip"
        local ip=${!var}
        echo "## ip=${ip}"
        local var="${name}_id"
        local instance_name=${!var}
        echo "## instance_name=${instance_name}"
        local var="${name}_instance_state"
        local instance_state=${!var}
        echo "## instance_state=${instance_state}"
    
        ## print vm
        # libvmpool__print_vm $vm

        ## get type
        # libvmpool__vm_as $vm ivan

        # echo ${ivan__pool}
        # echo ${ivan__type}
        # echo ${ivan__ip}
        if [[ "_${instance_state}" == "_running" ]]; then
            echo "OK  this VM is fine in AWS, no health issues"
        else
            echo "KO 37264 this VM is has health issues (statue=${instance_state})"
            exit 1
        fi
    # echo "KO 85676 this VM doesn't exist"
    popd > /dev/null
}

function libAWS__terminate_vm {
    local name=$1
    local ofile="${name}.tf"
    pushd terraform1 
        if [[ ! -f ${ofile} ]]; then
            echo "VM ${name} doesn't exist"
        else
            rm ${ofile}
            terraform apply -auto-approve
            if [[ $? -ne 0 ]]; then
                >&2 echo "KO 83981 error running terraform apply"
                exit 1
            fi
            libvmpool__vm_terminated "${name}" 
        fi
    popd > /dev/null
}

function libAWS__test {
    local result=$(libAWS__create_vm "OHI" "VM_OHI_22" "t3.small", "debian", "/tmp/test_ohi.pem")
    if [[ "_${result}" == "_KO *" ]]; then
        echo ${result}
        exit 1
    fi
    local result=$(libAWS__check_vm "${libAWS__new_vm}")
    if [[ "_${result}" == "_KO *" ]]; then
        echo ${result}
        exit 1
    fi
    local result=$(libAWS__terminate_vm "${libAWS__new_vm}")
    if [[ "_${result}" == "_KO *" ]]; then
        echo ${result}
        exit 1
    fi

    #... more tests

    echo "OK"
    exit 0
}

